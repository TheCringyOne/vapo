================================================================
RepopackPy Output File
================================================================

This file was generated by RepopackPy on: 2025-03-28T14:31:22.608547

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and RepopackPy's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

For more information about RepopackPy, visit: https://github.com/abinthomasonline/repopack-py

================================================================
Repository Structure
================================================================
README.md
backend\controllers\admin.controller.js
backend\controllers\announcement.controller.js
backend\controllers\auth.controller.js
backend\controllers\connection.controller.js
backend\controllers\notification.controller.js
backend\controllers\post.controller.js
backend\controllers\project.controller.js
backend\controllers\user.controller.js
backend\emails\emailHandlers.js
backend\emails\emailTemplates.js
backend\jobs\projectCleanup.js
backend\lib\cloudinary.js
backend\lib\db.js
backend\lib\mailtrap.js
backend\middleware\admin.middleware.js
backend\middleware\auth.middleware.js
backend\models\announcement.model.js
backend\models\bannedUser.model.js
backend\models\connectionRequest.model.js
backend\models\notification.model.js
backend\models\post.model.js
backend\models\projectPost.model.js
backend\models\user.model.js
backend\routes\admin.route.js
backend\routes\announcement.route.js
backend\routes\auth.route.js
backend\routes\connection.route.js
backend\routes\notification.route.js
backend\routes\post.route.js
backend\routes\project.route.js
backend\routes\user.route.js
backend\server.js
backend\teclogoazul.svg
frontend\README.md
frontend\eslint.config.js
frontend\index.html
frontend\package.json
frontend\postcss.config.js
frontend\public\avatar.png
frontend\public\banner.png
frontend\public\logo redondo.png
frontend\public\logo.svg
frontend\public\screenshot-for-readme.png
frontend\public\small-logo.1png
frontend\public\small-logo.png
frontend\public\tec redondo.png
frontend\public\teclogoazul.svg
frontend\public\vite.svg
frontend\src\App.jsx
frontend\src\components\AboutSection.jsx
frontend\src\components\CompanyInfoSection.jsx
frontend\src\components\CompanyQuestionnaire.jsx
frontend\src\components\EducationSection.jsx
frontend\src\components\ExperienceSection.jsx
frontend\src\components\FriendRequest.jsx
frontend\src\components\Post.jsx
frontend\src\components\PostAction.jsx
frontend\src\components\PostCreation.jsx
frontend\src\components\PostPefil.jsx
frontend\src\components\PostPerfil.jsx
frontend\src\components\ProfileHeader.jsx
frontend\src\components\ProjectCreation.jsx
frontend\src\components\ProjectPost.jsx
frontend\src\components\QuestionnaireModal.jsx
frontend\src\components\RecommendedUser.jsx
frontend\src\components\Sidebar.jsx
frontend\src\components\SkillsSection.jsx
frontend\src\components\UserCard.jsx
frontend\src\components\auth\LoginForm.jsx
frontend\src\components\auth\SignUpForm.jsx
frontend\src\components\layout\Layout.jsx
frontend\src\components\layout\Navbar.jsx
frontend\src\index.css
frontend\src\lib\axios.js
frontend\src\main.jsx
frontend\src\pages\AdminDashboardPage.jsx
frontend\src\pages\HomePage.jsx
frontend\src\pages\NetworkPage.jsx
frontend\src\pages\NotificationsPage.jsx
frontend\src\pages\PostPage.jsx
frontend\src\pages\ProfilePage.jsx
frontend\src\pages\ProjectsPage.jsx
frontend\src\pages\auth\LoginPage.jsx
frontend\src\pages\auth\SignUpPage.jsx
frontend\src\utils\dateUtils.js
frontend\tailwind.config.js
frontend\vite.config.js
package.json

================================================================
Repository Files
================================================================

================
File: package.json
================
{
	"name": "linkedin-clone",
	"version": "1.0.0",
	"description": "",
	"main": "backend/server.js",
	"scripts": {
		"dev": "nodemon backend/server.js",
		"start": "node backend/server.js",
		"build": "npm install && npm install --prefix frontend && npm run build --prefix frontend"
	},
	"keywords": [],
	"author": "",
	"type": "module",
	"license": "ISC",
	"dependencies": {
		"bcryptjs": "^2.4.3",
		"cloudinary": "^2.4.0",
		"cookie-parser": "^1.4.6",
		"cors": "^2.8.5",
		"dotenv": "^16.4.5",
		"express": "^4.19.2",
		"jsonwebtoken": "^9.0.2",
		"mailtrap": "^3.4.0",
		"mongoose": "^8.6.1"
	},
	"devDependencies": {
		"nodemon": "^3.1.4"
	}
}

================
File: README.md
================
<h1 align="center">Linkedin Clone ‚ú®</h1>

![Demo App](/frontend/public/screenshot-for-readme.png)

[Video Tutorial on Youtube](https://youtu.be/Ycg48pVp3SU)

About This Course:

-   üöÄ Project Setup
-   üóÑÔ∏è MongoDB Integration
-   üí≥ Stripe Payment Setup
-   üîê Authentication System with JWT
-   ‚úâÔ∏è Welcome Emails
-   üé® Design with Tailwind & DaisyUI
-   üõ°Ô∏è Data Protection
-   ü§ù Connection Requests (Send, Accept, Reject)
-   üìù Creating and Sharing Posts
-   üñºÔ∏è Image Upload for Posts and Profiles
-   üë§ Profile Creation and Updates
-   üë• Suggested Users Feature
-   üëç Like and Comment on Posts
-   üì∞ News Feed Algorithm
-   ‚åõ And a lot more...

### Setup .env file

```bash
PORT=5000
MONGO_URI=<your_mongo_uri>

JWT_SECRET=<yourverystrongsecret>

NODE_ENV=development

MAILTRAP_TOKEN=<your_mailtrap_token>
EMAIL_FROM=mailtrap@demomailtrap.com
EMAIL_FROM_NAME=<Your_Name>

CLOUDINARY_API_KEY=<your_cloudinary_api_key>
CLOUDINARY_API_SECRET=<your_cloudinary_api_secret>
CLOUDINARY_CLOUD_NAME=<your_cloudinary_cloud_name>

CLIENT_URL=http://localhost:5173
```

### Run this app locally

```shell
npm run build
```

### Start the app

```shell
npm run start
```

================
File: backend\server.js
================
// backend/server.js
import express from "express";
import dotenv from "dotenv";
import cookieParser from "cookie-parser";
import cors from "cors";
import path from "path";
import authRoutes from "./routes/auth.route.js";
import userRoutes from "./routes/user.route.js";
import postRoutes from "./routes/post.route.js";
import notificationRoutes from "./routes/notification.route.js";
import connectionRoutes from "./routes/connection.route.js";
import adminRoutes from "./routes/admin.route.js";
import projectRoutes from "./routes/project.route.js"; // Add this line
import { connectDB } from "./lib/db.js";
import { cleanupExpiredProjects } from "./jobs/projectCleanup.js"; // Add this if you want automatic cleanup
import announcementRoutes from "./routes/announcement.route.js";



dotenv.config();
const app = express();
const PORT = process.env.PORT || 5000;
const __dirname = path.resolve();

if (process.env.NODE_ENV !== "production") {
    app.use(
        cors({
            origin: ["http://localhost:5173", "http://127.0.0.1:5173"],
            credentials: true,
        })
    );
}

// Update these lines
app.use(express.json({ limit: "50mb" }));
app.use(express.urlencoded({ limit: "50mb", extended: true }));
app.use(cookieParser());

// Routes
app.use("/api/v1/auth", authRoutes);
app.use("/api/v1/users", userRoutes);
app.use("/api/v1/posts", postRoutes);
app.use("/api/v1/notifications", notificationRoutes);
app.use("/api/v1/connections", connectionRoutes);
app.use("/api/v1/admin", adminRoutes);
app.use("/api/v1/projects", projectRoutes); // Add this line
app.use("/api/v1/announcements", announcementRoutes);

if (process.env.NODE_ENV === "production") {
    app.use(express.static(path.join(__dirname, "/frontend/dist")));
    app.get("*", (req, res) => {
        res.sendFile(path.resolve(__dirname, "frontend", "dist", "index.html"));
    });
}

// Optional: Set up automatic cleanup of expired projects
// This will run the cleanup job every day at midnight
if (process.env.NODE_ENV === "production") {
    setInterval(async () => {
        try {
            await cleanupExpiredProjects();
            console.log("Completed expired projects cleanup job");
        } catch (error) {
            console.error("Error in expired projects cleanup job:", error);
        }
    }, 24 * 60 * 60 * 1000); // Run every 24 hours
}

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
    connectDB();
});

================
File: backend\teclogoazul.svg
================
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="512.000000pt" height="512.000000pt" viewBox="0 0 512.000000 512.000000"
 preserveAspectRatio="xMidYMid meet">

<g transform="translate(0.000000,512.000000) scale(0.100000,-0.100000)"
fill="#000000" stroke="none">
<path d="M759 4935 c-15 -8 -30 -22 -34 -32 -4 -10 -28 -110 -54 -221 l-46
-204 -145 -48 c-80 -27 -160 -54 -178 -61 l-32 -13 0 -267 0 -266 178 -7 c627
-25 1005 -124 1442 -379 84 -49 95 -53 98 -36 7 42 -57 250 -97 315 -26 42
-192 152 -355 234 -208 105 -468 180 -679 197 -43 3 -80 9 -82 13 -7 11 95 28
242 42 273 25 578 -34 836 -163 177 -88 289 -169 438 -318 246 -246 390 -508
459 -836 28 -132 37 -360 20 -503 -11 -96 -62 -327 -74 -340 -3 -3 -33 3 -68
13 -146 41 -278 28 -379 -36 l-46 -29 14 -53 c38 -144 23 -306 -40 -421 -51
-93 -132 -146 -249 -161 -46 -6 -48 -7 -48 -40 0 -53 -34 -147 -74 -208 -83
-125 -219 -212 -415 -265 -84 -22 -116 -26 -256 -26 -141 -1 -166 2 -215 21
-45 17 -81 22 -195 25 -130 4 -147 7 -240 40 -55 19 -126 47 -157 61 l-58 27
0 -104 0 -104 72 -35 c65 -32 187 -75 259 -92 25 -6 27 -15 69 -208 41 -187
47 -204 76 -235 l33 -33 360 3 361 3 25 25 c21 21 32 58 69 233 24 115 47 211
49 214 3 3 58 22 122 44 l117 39 160 -141 c177 -156 200 -167 261 -131 46 26
455 328 490 360 15 14 31 42 37 61 10 36 -2 67 -133 352 l-35 76 59 84 c101
143 76 129 209 114 63 -8 165 -17 225 -20 108 -7 110 -7 133 18 16 17 53 118
118 323 92 293 104 347 84 383 -5 10 -95 67 -200 127 l-190 108 0 127 0 127
192 114 c152 90 195 120 203 142 8 23 -7 77 -94 339 -57 172 -110 322 -118
335 -25 40 -48 42 -269 16 -115 -13 -212 -23 -216 -22 -4 2 -41 48 -82 102
-73 97 -74 100 -62 130 7 17 45 106 85 198 39 92 71 178 71 192 0 14 -12 39
-27 55 -39 41 -520 380 -550 387 -39 10 -71 -11 -232 -159 l-150 -138 -98 31
c-54 18 -109 35 -122 39 -23 7 -28 22 -72 222 -42 188 -51 217 -74 237 -26 22
-28 22 -363 22 -273 -1 -342 -4 -363 -15z"/>
<path d="M264 3726 c-11 -44 10 -76 49 -76 137 0 588 -78 747 -129 l91 -29 14
35 c8 19 24 48 36 64 12 17 20 32 18 33 -2 2 -58 17 -124 34 -218 55 -387 78
-667 89 l-157 6 -7 -27z"/>
<path d="M2010 3591 c36 -93 53 -207 47 -310 -4 -53 -9 -108 -12 -122 -6 -25
-3 -27 72 -54 157 -55 281 -132 323 -199 30 -49 30 -134 0 -174 -22 -30 -20
-52 4 -52 7 0 33 18 58 40 62 54 90 122 96 230 14 288 -184 540 -528 669 -78
30 -81 29 -60 -28z"/>
<path d="M264 3564 c-4 -14 -2 -39 2 -57 l9 -31 175 -32 c222 -41 453 -93 573
-130 16 -5 18 1 15 72 l-3 78 -50 13 c-154 41 -592 113 -682 113 -27 0 -34 -5
-39 -26z"/>
<path d="M1323 3570 c-149 -76 -95 -302 72 -302 119 0 195 117 147 224 -38 87
-134 121 -219 78z m176 -64 c21 -25 9 -69 -21 -80 -50 -17 -89 42 -52 78 19
20 58 21 73 2z"/>
<path d="M1645 3413 c-13 -87 -61 -155 -140 -196 -56 -30 -164 -30 -221 0 -71
37 -134 126 -134 187 0 27 -35 43 -44 19 -30 -77 46 -257 133 -317 l37 -26
100 15 c54 8 134 15 178 15 92 0 267 -24 327 -45 23 -8 47 -15 54 -15 15 0 43
95 54 184 l7 67 -30 19 c-33 20 -257 122 -292 134 -19 6 -22 2 -29 -41z"/>
<path d="M264 3374 c-6 -25 1 -113 11 -122 10 -10 360 -116 525 -158 127 -33
203 -47 278 -51 56 -3 102 -3 102 1 0 4 -19 30 -41 59 -23 29 -50 71 -61 94
-20 46 -11 42 -173 82 -108 26 -598 121 -629 121 -3 0 -9 -12 -12 -26z"/>
<path d="M270 3141 c-18 -34 -9 -246 12 -266 2 -2 91 3 198 10 107 8 253 14
323 15 l128 0 60 42 59 42 -107 18 c-125 21 -299 62 -500 118 -78 22 -147 40
-152 40 -6 0 -15 -9 -21 -19z"/>
<path d="M2005 3012 c-9 -31 -18 -64 -21 -73 -3 -12 -21 -18 -62 -22 -60 -5
-151 -43 -136 -56 15 -13 90 -31 129 -31 32 0 36 -2 25 -15 -7 -8 -21 -15 -32
-15 -10 0 -16 -4 -13 -10 3 -5 1 -18 -5 -29 -10 -19 -12 -19 -58 -5 -81 27
-79 25 -47 39 l30 13 -28 11 c-47 18 -66 13 -113 -35 -110 -109 -139 -295 -67
-427 30 -54 79 -97 144 -127 56 -25 73 -25 127 1 42 21 44 24 39 55 -4 24 -2
34 7 34 20 0 47 35 36 46 -5 5 -6 22 -2 39 8 28 13 30 67 36 40 5 63 13 72 25
28 39 9 132 -60 291 -41 94 -37 105 36 109 53 2 78 33 85 102 5 54 10 49 -85
82 l-52 19 -16 -57z"/>
<path d="M1410 3039 c-138 -15 -303 -68 -373 -121 -16 -12 -5 -14 81 -15 234
-4 353 -54 381 -160 7 -26 7 -26 34 19 34 59 90 117 146 152 50 32 142 66 178
66 35 0 27 16 -14 28 -109 31 -301 45 -433 31z"/>
<path d="M580 2839 c-202 -11 -292 -24 -307 -45 -17 -23 -17 -105 0 -126 10
-13 48 -17 232 -22 121 -3 263 -10 315 -16 102 -11 333 -48 357 -57 10 -4 8 6
-8 36 -30 57 -23 127 18 185 l30 43 -150 6 c-174 8 -298 7 -487 -4z"/>
<path d="M1250 2772 c-57 -58 -45 -153 25 -186 41 -20 68 -20 105 -1 42 21 60
53 60 103 0 37 -6 50 -34 78 -29 29 -41 34 -81 34 -38 0 -52 -5 -75 -28z m120
-42 c40 -40 13 -100 -45 -100 -40 0 -55 16 -55 56 0 56 61 83 100 44z"/>
<path d="M1290 2685 c0 -10 11 -15 35 -15 24 0 35 5 35 15 0 10 -11 15 -35 15
-24 0 -35 -5 -35 -15z"/>
<path d="M289 2583 c-22 -5 -28 -58 -22 -187 5 -82 9 -106 20 -106 8 0 74 36
148 79 73 44 189 108 257 143 l123 62 -55 7 c-60 8 -445 9 -471 2z"/>
<path d="M1450 2560 c-14 -14 -33 -29 -43 -35 -15 -9 -14 -15 11 -64 28 -56
145 -191 156 -180 4 4 -7 28 -23 54 -36 57 -58 121 -69 195 l-7 55 -25 -25z"/>
<path d="M855 2558 c-45 -25 -328 -207 -447 -286 -105 -70 -131 -92 -148 -126
-31 -66 -44 -190 -31 -302 12 -99 39 -195 56 -201 6 -2 51 63 100 144 192 314
353 548 484 698 42 48 56 72 48 77 -17 11 -39 9 -62 -4z"/>
<path d="M946 2469 c-190 -241 -414 -598 -580 -929 -168 -333 -166 -326 -99
-401 76 -84 202 -126 404 -136 l126 -6 7 149 c25 534 104 962 241 1301 19 48
33 88 32 90 -2 1 -17 6 -34 9 -29 6 -35 1 -97 -77z"/>
<path d="M1112 2451 c-70 -182 -122 -481 -143 -816 -14 -219 -6 -662 11 -679
7 -7 70 -12 158 -14 170 -4 275 15 391 70 92 43 190 143 219 221 35 93 31 106
-40 147 -77 44 -196 154 -252 234 -137 192 -199 418 -199 719 l0 167 -36 9
c-86 21 -77 26 -109 -58z"/>
<path d="M1292 2378 c18 -378 229 -752 501 -888 98 -49 139 -58 182 -37 59 28
122 121 161 237 21 63 26 222 8 240 -9 9 -29 6 -79 -9 -156 -48 -329 -3 -491
127 -116 94 -227 261 -255 387 -20 92 -32 66 -27 -57z"/>
<path d="M1344 2463 c3 -16 28 -71 53 -123 107 -214 345 -378 516 -356 53 7
135 44 156 70 12 14 10 16 -16 16 -45 0 -120 26 -163 55 -30 21 -54 28 -99 30
-89 5 -162 30 -228 78 -76 57 -124 113 -162 193 -19 40 -37 64 -47 64 -12 0
-15 -6 -10 -27z"/>
</g>
</svg>

================
File: backend\controllers\admin.controller.js
================
// backend/controllers/admin.controller.js
import BannedUser from "../models/bannedUser.model.js";
import User from "../models/user.model.js";
import bcrypt from "bcryptjs";
import { sendWelcomeEmail } from "../emails/emailHandlers.js";

export const createUser = async (req, res) => {
    try {
        const { name, username, email, password, role, studentId } = req.body;
        
        // Validate inputs
        if (!name || !username || !email || !password || !role) {
            return res.status(400).json({ message: "Todos los campos son requeridos" });
        }
        
        // For 'egresado' role, validate student ID and email format
        if (role === 'egresado') {
            if (!studentId) {
                return res.status(400).json({ message: "ID de estudiante es requerido para egresados" });
            }
            
            // Validate student ID format
            if (!/^\d{8}$/.test(studentId)) {
                return res.status(400).json({ message: "ID de estudiante inv√°lido. Debe ser un n√∫mero de 8 d√≠gitos." });
            }
            
            // Validate institutional email format
            const expectedEmail = `L${studentId}@tuxtla.tecnm.mx`;
            if (email.toLowerCase() !== expectedEmail.toLowerCase()) {
                return res.status(400).json({ 
                    message: "El correo institucional debe coincidir con el ID de estudiante (L{ID}@tuxtla.tecnm.mx)." 
                });
            }
            
            // Check if student ID already exists
            const existingStudentId = await User.findOne({ studentId });
            if (existingStudentId) {
                return res.status(400).json({ message: "Este ID de estudiante ya est√° registrado." });
            }
        }
        
        // Check if role is valid
        if (!['egresado', 'empresario', 'administrador'].includes(role)) {
            return res.status(400).json({ message: "Rol inv√°lido" });
        }
        
        // Check if email exists
        const existingEmail = await User.findOne({ email });
        if (existingEmail) {
            return res.status(400).json({ message: "El correo ya est√° registrado" });
        }
        
        // Check if username exists
        const existingUsername = await User.findOne({ username });
        if (existingUsername) {
            return res.status(400).json({ message: "El nombre de usuario ya est√° registrado" });
        }
        
        // Name check has been removed to allow duplicate names
        
        // Hash password
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);
        
        // Create user
        const newUser = new User({
            name,
            email,
            password: hashedPassword,
            username,
            role,
            studentId: role === 'egresado' ? studentId : undefined,
            // Set isFirstLogin to true only for empresario users
            isFirstLogin: role === 'empresario' ? true : undefined
        });
        
        await newUser.save();
        
        // Send welcome email
        const profileUrl = process.env.CLIENT_URL + "/profile/" + newUser.username;
        try {
            await sendWelcomeEmail(newUser.email, newUser.name, profileUrl, newUser.role);
        } catch (emailError) {
            console.error("Error al enviar el correo de bienvenida", emailError);
        }
        
        res.status(201).json({ message: "Usuario creado exitosamente", user: {
            _id: newUser._id,
            name: newUser.name,
            email: newUser.email,
            username: newUser.username,
            role: newUser.role,
            studentId: newUser.studentId,
            isFirstLogin: newUser.isFirstLogin
        }});
        
    } catch (error) {
        console.error("Error creating user:", error);
        res.status(500).json({ message: "Error del servidor" });
    }
};





// Add this function to your existing admin.controller.js
export const banUser = async (req, res) => {
  try {
    const { userId } = req.params;
    const { reason } = req.body;
    
    // Find the user to be banned
    const userToBan = await User.findById(userId);
    
    if (!userToBan) {
      return res.status(404).json({ message: "Usuario no encontrado" });
    }
    
    // Create entry in banned collection
    if (userToBan.role === 'egresado' && userToBan.studentId) {
      const bannedUser = new BannedUser({
        studentId: userToBan.studentId,
        email: userToBan.email,
        reason: reason || "No se proporcion√≥ raz√≥n",
        bannedBy: req.user._id
      });
      
      await bannedUser.save();
    }
    
    // Delete the user
    await User.findByIdAndDelete(userId);
    
    res.json({ message: "Usuario baneado exitosamente" });
  } catch (error) {
    console.error("Error banning user:", error);
    res.status(500).json({ message: "Error del servidor" });
  }
};

// Function to get all banned users
export const getBannedUsers = async (req, res) => {
  try {
    const bannedUsers = await BannedUser.find().populate("bannedBy", "name username");
    res.json(bannedUsers);
  } catch (error) {
    console.error("Error getting banned users:", error);
    res.status(500).json({ message: "Error del servidor" });
  }
};

// Function to unban a user
export const unbanUser = async (req, res) => {
  try {
    const { studentId } = req.params;
    
    const bannedUser = await BannedUser.findOneAndDelete({ studentId });
    
    if (!bannedUser) {
      return res.status(404).json({ message: "Usuario baneado no encontrado" });
    }
    
    res.json({ message: "Usuario desbaneado exitosamente" });
  } catch (error) {
    console.error("Error unbanning user:", error);
    res.status(500).json({ message: "Error del servidor" });
  }
};

export const getAllUsers = async (req, res) => {
    try {
        const users = await User.find().select("-password");
        res.json(users);
    } catch (error) {
        console.error("Error fetching users:", error);
        res.status(500).json({ message: "Error del servidor" });
    }
};

export const updateUserRole = async (req, res) => {
    try {
        const { role } = req.body;
        const userId = req.params.id;
        
        if (!['egresado', 'empresario', 'administrador'].includes(role)) {
            return res.status(400).json({ message: "Rol inv√°lido" });
        }
        
        const updatedUser = await User.findByIdAndUpdate(
            userId,
            { role },
            { new: true }
        ).select("-password");
        
        if (!updatedUser) {
            return res.status(404).json({ message: "Usuario no encontrado" });
        }
        
        res.json(updatedUser);
    } catch (error) {
        console.error("Error updating user role:", error);
        res.status(500).json({ message: "Error del servidor" });
    }
};

export const deleteUser = async (req, res) => {
    try {
        const userId = req.params.id;
        
        const deletedUser = await User.findByIdAndDelete(userId);
        
        if (!deletedUser) {
            return res.status(404).json({ message: "Usuario no encontrado" });
        }
        
        res.json({ message: "Usuario eliminado exitosamente" });
    } catch (error) {
        console.error("Error deleting user:", error);
        res.status(500).json({ message: "Error del servidor" });
    }
};

================
File: backend\controllers\announcement.controller.js
================
import cloudinary from "../lib/cloudinary.js";
import Announcement from "../models/announcement.model.js";

// Get all announcements
export const getAnnouncements = async (req, res) => {
  try {
    const announcements = await Announcement.find()
      .populate("author", "name username profilePicture headline")
      .sort({ createdAt: -1 });

    res.status(200).json(announcements);
  } catch (error) {
    console.error("Error in getAnnouncements controller:", error);
    res.status(500).json({ message: "Server error" });
  }
};

// Create a new announcement (admin only)
export const createAnnouncement = async (req, res) => {
  try {
    const { content, image } = req.body;
    let newAnnouncement;

    if (!content) {
      return res.status(400).json({ message: "El contenido es obligatorio" });
    }

    if (image) {
      const imgResult = await cloudinary.uploader.upload(image);
      newAnnouncement = new Announcement({
        author: req.user._id,
        content,
        image: imgResult.secure_url,
      });
    } else {
      newAnnouncement = new Announcement({
        author: req.user._id,
        content,
      });
    }

    await newAnnouncement.save();

    res.status(201).json(newAnnouncement);
  } catch (error) {
    console.error("Error in createAnnouncement controller:", error);
    res.status(500).json({ message: "Server error" });
  }
};

// Delete an announcement (admin only)
export const deleteAnnouncement = async (req, res) => {
  try {
    const announcementId = req.params.id;

    const announcement = await Announcement.findById(announcementId);

    if (!announcement) {
      return res.status(404).json({ message: "Anuncio no encontrado" });
    }

    // Delete the image from cloudinary if it exists
    if (announcement.image) {
      await cloudinary.uploader.destroy(announcement.image.split("/").pop().split(".")[0]);
    }

    await Announcement.findByIdAndDelete(announcementId);

    res.status(200).json({ message: "Anuncio eliminado exitosamente" });
  } catch (error) {
    console.error("Error in deleteAnnouncement controller:", error);
    res.status(500).json({ message: "Server error" });
  }
};

================
File: backend\controllers\auth.controller.js
================
import User from "../models/user.model.js";
import BannedUser from "../models/bannedUser.model.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { sendWelcomeEmail } from "../emails/emailHandlers.js";

export const signup = async (req, res) => {
	try {
		const { name, username, email, password, studentId } = req.body;

		if (!name || !username || !email || !password || !studentId) {
			return res.status(400).json({ message: "All fields are required" });
		}
		
		// Check if student ID is banned
		if (studentId) {
			const isBanned = await BannedUser.findOne({ studentId });
			if (isBanned) {
				return res.status(403).json({ message: "Este ID de estudiante ha sido suspendido del sistema" });
			}
		}
		
		// Validate student ID format (assuming it's 8 digits)
        if (!/^\d{8}$/.test(studentId)) {
            return res.status(400).json({ message: "ID de estudiante inv√°lido. Debe ser un n√∫mero de 8 d√≠gitos." });
        }
        
        // Validate institutional email format
        const expectedEmail = `L${studentId}@tuxtla.tecnm.mx`;
        if (email.toLowerCase() !== expectedEmail.toLowerCase()) {
            return res.status(400).json({ 
                message: "El correo institucional debe coincidir con tu ID de estudiante (L{ID}@tuxtla.tecnm.mx)." 
            });
        }
        
        // Check if student ID already exists
        const existingStudentId = await User.findOne({ studentId });
        if (existingStudentId) {
            return res.status(400).json({ message: "Este ID de estudiante ya est√° registrado." });
        }
		
		// Default role is 'egresado' - role assignment will be handled by admins
		const role = 'egresado';
		
		// Check if email already exists
		const existingEmail = await User.findOne({ email });
		if (existingEmail) {
			return res.status(400).json({ message: "El correo ya esta registrado" });
		}

		// Check if username already exists
		const existingUsername = await User.findOne({ username });
		if (existingUsername) {
			return res.status(400).json({ message: "El nombre de usuario ya esta registrado" });
		}

		// Removed name check - allowing duplicate names

		if (password.length < 6) {
			return res.status(400).json({ message: "La  contrase√±a debre tener almenos 6 caracteres" });
		}

		const salt = await bcrypt.genSalt(10);
		const hashedPassword = await bcrypt.hash(password, salt);

		const user = new User({
			name,
			email,
			password: hashedPassword,
			username,
			studentId, // Added studentId field
			role,
		});

		await user.save();

		const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: "3d" });

		// Set cookie with more permissive settings for development
		res.cookie("jwt-linkedin", token, {
			httpOnly: true,
			maxAge: 3 * 24 * 60 * 60 * 1000,
			sameSite: "lax", // Changed from strict to lax for development
			secure: process.env.NODE_ENV === "production",
		});

		res.status(201).json({ message: "Usuario registrado correctamente" });

		const profileUrl = process.env.CLIENT_URL + "/profile/" + user.username;

		try {
			await sendWelcomeEmail(user.email, user.name, profileUrl, user.role);
		} catch (emailError) {
			console.error("Error al enviar el correo de bienvenida", emailError);
		}
	} catch (error) {
		console.log("Error in signup: ", error.message);
		res.status(500).json({ message: "Internal server error" });
	}
};

export const login = async (req, res) => {
	try {
		const { username, password } = req.body;

		// Check if user exists
		const user = await User.findOne({ username });
		if (!user) {
			return res.status(400).json({ message: "Datos incorrectos" });
		}

		// Check password
		const isMatch = await bcrypt.compare(password, user.password);
		if (!isMatch) {
			return res.status(400).json({ message: "Datos incorrectos" });
		}

		// Create and send token
		const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: "3d" });
		
		// Set cookie with more permissive settings for development
		res.cookie("jwt-linkedin", token, {
			httpOnly: true,
			maxAge: 3 * 24 * 60 * 60 * 1000,
			sameSite: "lax", // Changed from strict to lax for development
			secure: process.env.NODE_ENV === "production",
		});

		// Create response object with isFirstLogin for empresario users
		const responseData = { message: "Sesion iniciada correctamente" };
		
		// Add firstLogin info for empresario users
		if (user.role === 'empresario') {
			responseData.isFirstLogin = !!user.isFirstLogin;
		}

		res.json(responseData);
	} catch (error) {
		console.error("Error in login controller:", error);
		res.status(500).json({ message: "Server error" });
	}
};

export const logout = (req, res) => {
	res.clearCookie("jwt-linkedin");
	res.json({ message: "Sesion cerrada correctamente" });
};

export const getCurrentUser = async (req, res) => {
	try {
		res.json(req.user);
	} catch (error) {
		console.error("Error in getCurrentUser controller:", error);
		res.status(500).json({ message: "Server error" });
	}
};

================
File: backend\controllers\connection.controller.js
================
import { sendConnectionAcceptedEmail } from "../emails/emailHandlers.js";
import ConnectionRequest from "../models/connectionRequest.model.js";
import Notification from "../models/notification.model.js";
import User from "../models/user.model.js";

export const sendConnectionRequest = async (req, res) => {
	try {
		const { userId } = req.params;
		const senderId = req.user._id;

		if (senderId.toString() === userId) {
			return res.status(400).json({ message: "No puedes enviarte una petici√≥n de conexi√≥n a ti mismo" });
		}

		if (req.user.connections.includes(userId)) {
			return res.status(400).json({ message: "Ya tienes una conexi√≥n con esta persona" });
		}

		const existingRequest = await ConnectionRequest.findOne({
			sender: senderId,
			recipient: userId,
			status: "pending",
		});

		if (existingRequest) {
			return res.status(400).json({ message: "Ya enviaste una solicitud de conexi√≥n a esta persona" });
		}

		const newRequest = new ConnectionRequest({
			sender: senderId,
			recipient: userId,
		});

		await newRequest.save();

		res.status(201).json({ message: "Petici√≥n de contacto aceptada" });
	} catch (error) {
		res.status(500).json({ message: "Server error" });
	}
};

export const acceptConnectionRequest = async (req, res) => {
	try {
		const { requestId } = req.params;
		const userId = req.user._id;

		const request = await ConnectionRequest.findById(requestId)
			.populate("sender", "name email username")
			.populate("recipient", "name username");

		if (!request) {
			return res.status(404).json({ message: "Connection request not found" });
		}

		// check if the req is for the current user
		if (request.recipient._id.toString() !== userId.toString()) {
			return res.status(403).json({ message: "Sin autorizaci√≥n para aceptar esta conexi√≥n" });
		}

		if (request.status !== "pending") {
			return res.status(400).json({ message: "Esta petici√≥n ya ha sido procesada" });
		}

		request.status = "accepted";
		await request.save();

		// if im your friend then ur also my friend ;)
		await User.findByIdAndUpdate(request.sender._id, { $addToSet: { connections: userId } });
		await User.findByIdAndUpdate(userId, { $addToSet: { connections: request.sender._id } });

		const notification = new Notification({
			recipient: request.sender._id,
			type: "connectionAccepted",
			relatedUser: userId,
		});

		await notification.save();

		res.json({ message: "Conexi√≥n aceptada" });

		const senderEmail = request.sender.email;
		const senderName = request.sender.name;
		const recipientName = request.recipient.name;
		const profileUrl = process.env.CLIENT_URL + "/profile/" + request.recipient.username;

		try {
			await sendConnectionAcceptedEmail(senderEmail, senderName, recipientName, profileUrl);
		} catch (error) {
			console.error("Error in sendConnectionAcceptedEmail:", error);
		}
	} catch (error) {
		console.error("Error in acceptConnectionRequest controller:", error);
		res.status(500).json({ message: "Server error" });
	}
};

export const rejectConnectionRequest = async (req, res) => {
	try {
		const { requestId } = req.params;
		const userId = req.user._id;

		const request = await ConnectionRequest.findById(requestId);

		if (request.recipient.toString() !== userId.toString()) {
			return res.status(403).json({ message: "Not authorized to reject this request" });
		}

		if (request.status !== "pending") {
			return res.status(400).json({ message: "This request has already been processed" });
		}

		request.status = "rejected";
		await request.save();

		res.json({ message: "Connection request rejected" });
	} catch (error) {
		console.error("Error in rejectConnectionRequest controller:", error);
		res.status(500).json({ message: "Server error" });
	}
};

export const getConnectionRequests = async (req, res) => {
	try {
		const userId = req.user._id;

		const requests = await ConnectionRequest.find({ recipient: userId, status: "pending" }).populate(
			"sender",
			"name username profilePicture headline connections"
		);

		res.json(requests);
	} catch (error) {
		console.error("Error in getConnectionRequests controller:", error);
		res.status(500).json({ message: "Server error" });
	}
};

export const getUserConnections = async (req, res) => {
	try {
		const userId = req.user._id;

		const user = await User.findById(userId).populate(
			"connections",
			"name username profilePicture headline connections"
		);

		res.json(user.connections);
	} catch (error) {
		console.error("Error en el controlador getUserConnections:", error);
		res.status(500).json({ message: "Server error" });
	}
};

export const removeConnection = async (req, res) => {
	try {
		const myId = req.user._id;
		const { userId } = req.params;

		await User.findByIdAndUpdate(myId, { $pull: { connections: userId } });
		await User.findByIdAndUpdate(userId, { $pull: { connections: myId } });

		res.json({ message: "Conexi√≥n eliminada" });
	} catch (error) {
		console.error("Error in removeConnection controller:", error);
		res.status(500).json({ message: "Server error" });
	}
};

export const getConnectionStatus = async (req, res) => {
	try {
		const targetUserId = req.params.userId;
		const currentUserId = req.user._id;

		const currentUser = req.user;
		if (currentUser.connections.includes(targetUserId)) {
			return res.json({ status: "connected" });
		}

		const pendingRequest = await ConnectionRequest.findOne({
			$or: [
				{ sender: currentUserId, recipient: targetUserId },
				{ sender: targetUserId, recipient: currentUserId },
			],
			status: "pending",
		});

		if (pendingRequest) {
			if (pendingRequest.sender.toString() === currentUserId.toString()) {
				return res.json({ status: "pending" });
			} else {
				return res.json({ status: "received", requestId: pendingRequest._id });
			}
		}

		// if no connection or pending req found
		res.json({ status: "not_connected" });
	} catch (error) {
		console.error("Error in getConnectionStatus controller:", error);
		res.status(500).json({ message: "Server error" });
	}
};

================
File: backend\controllers\notification.controller.js
================
import Notification from "../models/notification.model.js";

export const getUserNotifications = async (req, res) => {
	try {
		const notifications = await Notification.find({ recipient: req.user._id })
			.sort({ createdAt: -1 })
			.populate("relatedUser", "name username profilePicture")
			.populate("relatedPost", "content image");

		res.status(200).json(notifications);
	} catch (error) {
		console.error("Error en el getUserNotifications controller:", error);
		res.status(500).json({ message: "Internal server error" });
	}
};

export const markNotificationAsRead = async (req, res) => {
	const notificationId = req.params.id;
	try {
		const notification = await Notification.findByIdAndUpdate(
			{ _id: notificationId, recipient: req.user._id },
			{ read: true },
			{ new: true }
		);

		res.json(notification);
	} catch (error) {
		console.error("Error en el markNotificationAsRead controller:", error);
		res.status(500).json({ message: "Internal server error" });
	}
};

export const deleteNotification = async (req, res) => {
	const notificationId = req.params.id;

	try {
		await Notification.findOneAndDelete({
			_id: notificationId,
			recipient: req.user._id,
		});

		res.json({ message: "Notificaci‚àö‚â•n borrada exitosamente" });
	} catch (error) {
		res.status(500).json({ message: "Server error" });
	}
};

================
File: backend\controllers\post.controller.js
================
import cloudinary from "../lib/cloudinary.js";
import Post from "../models/post.model.js";
import Notification from "../models/notification.model.js";
import { sendCommentNotificationEmail } from "../emails/emailHandlers.js";

export const getFeedPosts = async (req, res) => {
	try {
		const posts = await Post.find({ author: { $in: [...req.user.connections, req.user._id] } })
			.populate("author", "name username profilePicture headline")
			.populate("comments.user", "name profilePicture")
			.sort({ createdAt: -1 });

		res.status(200).json(posts);
	} catch (error) {
		console.error("Error in getFeedPosts controller:", error);
		res.status(500).json({ message: "Server error" });
	}
};

export const createPost = async (req, res) => {
	try {
		const { content, image } = req.body;
		let newPost;

		if (image) {
			const imgResult = await cloudinary.uploader.upload(image);
			newPost = new Post({
				author: req.user._id,
				content,
				image: imgResult.secure_url,
			});
		} else {
			newPost = new Post({
				author: req.user._id,
				content,
			});
		}

		await newPost.save();

		res.status(201).json(newPost);
	} catch (error) {
		console.error("Error in createPost controller:", error);
		res.status(500).json({ message: "Server error" });
	}
};

export const deletePost = async (req, res) => {
	try {
		const postId = req.params.id;
		const userId = req.user._id;

		const post = await Post.findById(postId);

		if (!post) {
			return res.status(404).json({ message: "Post not found" });
		}

		// check if the current user is the author of the post
		if (post.author.toString() !== userId.toString()) {
			return res.status(403).json({ message: "You are not authorized to delete this post" });
		}

		// delete the image from cloudinary as well!
		if (post.image) {
			await cloudinary.uploader.destroy(post.image.split("/").pop().split(".")[0]);
		}

		await Post.findByIdAndDelete(postId);

		res.status(200).json({ message: "Post borrado" });
	} catch (error) {
		console.log("Error in delete post controller", error.message);
		res.status(500).json({ message: "Server error" });
	}
};

export const getPostById = async (req, res) => {
	try {
		const postId = req.params.id;
		const post = await Post.findById(postId)
			.populate("author", "name username profilePicture headline")
			.populate("comments.user", "name profilePicture username headline");

		res.status(200).json(post);
	} catch (error) {
		console.error("Error in getPostById controller:", error);
		res.status(500).json({ message: "Server error" });
	}
};

export const createComment = async (req, res) => {
	try {
		const postId = req.params.id;
		const { content } = req.body;

		const post = await Post.findByIdAndUpdate(
			postId,
			{
				$push: { comments: { user: req.user._id, content } },
			},
			{ new: true }
		).populate("author", "name email username headline profilePicture");

		// create a notification if the comment owner is not the post owner
		if (post.author._id.toString() !== req.user._id.toString()) {
			const newNotification = new Notification({
				recipient: post.author,
				type: "comment",
				relatedUser: req.user._id,
				relatedPost: postId,
			});

			await newNotification.save();

			try {
				const postUrl = process.env.CLIENT_URL + "/post/" + postId;
				await sendCommentNotificationEmail(
					post.author.email,
					post.author.name,
					req.user.name,
					postUrl,
					content
				);
			} catch (error) {
				console.log("Error in sending comment notification email:", error);
			}
		}

		res.status(200).json(post);
	} catch (error) {
		console.error("Error in createComment controller:", error);
		res.status(500).json({ message: "Server error" });
	}
};

export const likePost = async (req, res) => {
	try {
		const postId = req.params.id;
		const post = await Post.findById(postId);
		const userId = req.user._id;

		if (post.likes.includes(userId)) {
			// unlike the post
			post.likes = post.likes.filter((id) => id.toString() !== userId.toString());
		} else {
			// like the post
			post.likes.push(userId);
			// create a notification if the post owner is not the user who liked
			if (post.author.toString() !== userId.toString()) {
				const newNotification = new Notification({
					recipient: post.author,
					type: "like",
					relatedUser: userId,
					relatedPost: postId,
				});

				await newNotification.save();
			}
		}

		await post.save();

		res.status(200).json(post);
	} catch (error) {
		console.error("Error in likePost controller:", error);
		res.status(500).json({ message: "Server error" });
	}
};

================
File: backend\controllers\project.controller.js
================
// backend/controllers/project.controller.js
import cloudinary from "../lib/cloudinary.js";
import ProjectPost from "../models/projectPost.model.js";
import Notification from "../models/notification.model.js";
import mongoose from "mongoose";

// Update expired projects helper
const updateExpiredProjects = async () => {
    const now = new Date();
    await ProjectPost.updateMany(
        { expirationDate: { $lt: now }, status: "active" },
        { status: "expired" }
    );
};

// Get all projects
export const getProjects = async (req, res) => {
    try {
        const { status, interested, created } = req.query;
        const userId = req.user._id;
        
        let query = {};
        
        // Filter by status if provided
        if (status) {
            query.status = status;
        }
        
        // Filter projects the user is interested in
        if (interested === "true") {
            query["interestedUsers.user"] = userId;
        }
        
        // Filter projects created by the user
        if (created === "true") {
            query.author = userId;
        }
        
        const projects = await ProjectPost.find(query)
            .populate("author", "name username profilePicture headline")
            .populate("comments.user", "name profilePicture")
            .populate("interestedUsers.user", "name username profilePicture headline")
            .sort({ createdAt: -1 });
        
        // Convert Mongoose documents to plain objects
        const plainProjects = projects.map(project => project.toObject());
        
        res.status(200).json(plainProjects);
    } catch (error) {
        console.error("Error in getProjects controller:", error);
        res.status(500).json({ message: "Server error" });
    }
};

// Create a new project post
export const createProject = async (req, res) => {
    try {
        const { title, content, image, projectRequirements, projectGoals, expirationDays } = req.body;
        
        if (!title || !content) {
            return res.status(400).json({ message: "Title and content are required" });
        }
        
        // Calculate expiration date
        const expirationDate = new Date();
        expirationDate.setDate(expirationDate.getDate() + (parseInt(expirationDays) || 30));
        
        let newProject;
        
        if (image) {
            const imgResult = await cloudinary.uploader.upload(image);
            newProject = new ProjectPost({
                author: req.user._id,
                title,
                content,
                image: imgResult.secure_url,
                projectRequirements,
                projectGoals,
                expirationDate
            });
        } else {
            newProject = new ProjectPost({
                author: req.user._id,
                title,
                content,
                projectRequirements,
                projectGoals,
                expirationDate
            });
        }
        
        await newProject.save();
        
        // Return as plain object
        res.status(201).json(newProject.toObject());
    } catch (error) {
        console.error("Error in createProject controller:", error);
        res.status(500).json({ message: "Server error" });
    }
};

// Get project by ID
export const getProjectById = async (req, res) => {
    try {
        const projectId = req.params.id;
        
        if (!mongoose.Types.ObjectId.isValid(projectId)) {
            return res.status(400).json({ message: "Invalid project ID" });
        }
        
        const project = await ProjectPost.findById(projectId)
            .populate("author", "name username profilePicture headline")
            .populate("comments.user", "name profilePicture username headline")
            .populate("interestedUsers.user", "name username profilePicture headline");
        
        if (!project) {
            return res.status(404).json({ message: "Project not found" });
        }
        
        // Return as plain object
        res.status(200).json(project.toObject());
    } catch (error) {
        console.error("Error in getProjectById controller:", error);
        res.status(500).json({ message: "Server error" });
    }
};

// Update project
export const updateProject = async (req, res) => {
    try {
        const projectId = req.params.id;
        const { title, content, projectRequirements, projectGoals, status, expirationDays } = req.body;
        
        const project = await ProjectPost.findById(projectId);
        
        if (!project) {
            return res.status(404).json({ message: "Project not found" });
        }
        
        if (project.author.toString() !== req.user._id.toString()) {
            return res.status(403).json({ message: "Not authorized to update this project" });
        }
        
        if (title) project.title = title;
        if (content) project.content = content;
        if (projectRequirements) project.projectRequirements = projectRequirements;
        if (projectGoals) project.projectGoals = projectGoals;
        if (status) project.status = status;
        
        if (expirationDays) {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + parseInt(expirationDays));
            project.expirationDate = expirationDate;
        }
        
        await project.save();
        
        // Return as plain object
        res.status(200).json(project.toObject());
    } catch (error) {
        console.error("Error in updateProject controller:", error);
        res.status(500).json({ message: "Server error" });
    }
};

// Delete project
export const deleteProject = async (req, res) => {
    try {
        const projectId = req.params.id;
        
        const project = await ProjectPost.findById(projectId);
        
        if (!project) {
            return res.status(404).json({ message: "Project not found" });
        }
        
        if (project.author.toString() !== req.user._id.toString()) {
            return res.status(403).json({ message: "Not authorized to delete this project" });
        }
        
        if (project.image) {
            const publicId = project.image.split('/').pop().split('.')[0];
            await cloudinary.uploader.destroy(publicId);
        }
        
        await ProjectPost.findByIdAndDelete(projectId);
        
        res.status(200).json({ message: "Project deleted successfully" });
    } catch (error) {
        console.error("Error in deleteProject controller:", error);
        res.status(500).json({ message: "Server error" });
    }
};

// Toggle interest in project
export const toggleInterestInProject = async (req, res) => {
    try {
        const projectId = req.params.id;
        const userId = req.user._id;
        
        const project = await ProjectPost.findById(projectId);
        
        if (!project) {
            return res.status(404).json({ message: "Project not found" });
        }
        
        if (project.status === "expired") {
            return res.status(400).json({ message: "Cannot show interest in an expired project" });
        }
        
        const isInterested = project.interestedUsers.some(
            interest => interest.user.toString() === userId.toString()
        );
        
        if (isInterested) {
            project.interestedUsers = project.interestedUsers.filter(
                interest => interest.user.toString() !== userId.toString()
            );
        } else {
            project.interestedUsers.push({ user: userId });
            
            if (project.author.toString() !== userId.toString()) {
                const notification = new Notification({
                    recipient: project.author,
                    type: "projectInterest",
                    relatedUser: userId,
                    relatedProject: projectId
                });
                await notification.save();
            }
        }
        
        await project.save();
        
        res.status(200).json({
            message: isInterested ? "Interest removed" : "Interest added",
            project: project.toObject()
        });
    } catch (error) {
        console.error("Error in toggleInterestInProject controller:", error);
        res.status(500).json({ message: "Server error" });
    }
};

// Add comment to project
export const addCommentToProject = async (req, res) => {
    try {
        const projectId = req.params.id;
        const { content } = req.body;
        
        if (!content) {
            return res.status(400).json({ message: "Comment content is required" });
        }
        
        const project = await ProjectPost.findById(projectId);
        
        if (!project) {
            return res.status(404).json({ message: "Project not found" });
        }
        
        if (project.status === "expired") {
            return res.status(400).json({ message: "Cannot comment on an expired project" });
        }
        
        project.comments.push({
            user: req.user._id,
            content
        });
        
        await project.save();
        
        // Create notification for project author
        if (project.author.toString() !== req.user._id.toString()) {
            const notification = new Notification({
                recipient: project.author,
                type: "projectComment",
                relatedUser: req.user._id,
                relatedProject: projectId
            });
            await notification.save();
        }
        
        // Return as plain object
        res.status(200).json(project.toObject());
    } catch (error) {
        console.error("Error in addCommentToProject controller:", error);
        res.status(500).json({ message: "Server error" });
    }
};

// Like project
export const likeProject = async (req, res) => {
    try {
        const projectId = req.params.id;
        const userId = req.user._id;
        
        const project = await ProjectPost.findById(projectId);
        
        if (!project) {
            return res.status(404).json({ message: "Project not found" });
        }
        
        if (project.status === "expired") {
            return res.status(400).json({ message: "Cannot like an expired project" });
        }
        
        const isLiked = project.likes.includes(userId);
        
        if (isLiked) {
            project.likes = project.likes.filter(id => id.toString() !== userId.toString());
        } else {
            project.likes.push(userId);
            
            if (project.author.toString() !== userId.toString()) {
                const notification = new Notification({
                    recipient: project.author,
                    type: "projectLike",
                    relatedUser: userId,
                    relatedProject: projectId
                });
                await notification.save();
            }
        }
        
        await project.save();
        
        // Return as plain object
        res.status(200).json(project.toObject());
    } catch (error) {
        console.error("Error in likeProject controller:", error);
        res.status(500).json({ message: "Server error" });
    }
};

================
File: backend\controllers\user.controller.js
================
import User from "../models/user.model.js";
import cloudinary from "../lib/cloudinary.js";

export const getSuggestedConnections = async (req, res) => {
   try {
       const limit = parseInt(req.query.limit) || 5;
       const currentUser = await User.findById(req.user._id).select("connections");
       const suggestedUser = await User.find({
           _id: {
               $ne: req.user._id,
               $nin: currentUser.connections,
           },
       })
           .select("name username profilePicture headline")
           .limit(limit);
       res.json(suggestedUser);
   } catch (error) {
       console.error("Error in getSuggestedConnections controller:", error);
       res.status(500).json({ message: "Server error" });
   }
};

export const getSuggestedConnectionsBig = async (req, res) => {
   try {
       const limit = parseInt(req.query.limit) || 50;
       const currentUser = await User.findById(req.user._id).select("connections");
       const suggestedUser = await User.find({
           _id: {
               $ne: req.user._id,
               $nin: currentUser.connections,
           },
       })
           .select("name username profilePicture headline")
           .limit(limit);
       res.json(suggestedUser);
   } catch (error) {
       console.error("Error in getSuggestedConnections controller:", error);
       res.status(500).json({ message: "Server error" });
   }
};

export const getPublicProfile = async (req, res) => {
   try {
       const user = await User.findOne({ username: req.params.username }).select("-password");
       if (!user) {
           return res.status(404).json({ message: "User not found" });
       }
       res.json(user);
   } catch (error) {
       console.error("Error in getPublicProfile controller:", error);
       res.status(500).json({ message: "Server error" });
   }
};

export const updateProfile = async (req, res) => {
   try {
       const allowedFields = [
           "name",
           "username",
           "headline",
           "about",
           "location",
           "profilePicture",
           "bannerImg",
           "curriculumImg",
           "skills",
           "experience",
           "education",
           "companyInfo", // Added companyInfo to allowed fields
       ];
       
       const updatedData = {};
       for (const field of allowedFields) {
           if (req.body[field] !== undefined) { // Changed from req.body[field] to handle empty objects
               updatedData[field] = req.body[field];
           }
       }

       console.log("Server - Received update data:", req.body);
       console.log("Server - Processed update data:", updatedData);

       if (req.body.profilePicture) {
           const result = await cloudinary.uploader.upload(req.body.profilePicture);
           updatedData.profilePicture = result.secure_url;
       }

       if (req.body.bannerImg) {
           const result = await cloudinary.uploader.upload(req.body.bannerImg);
           updatedData.bannerImg = result.secure_url;
       }

       if (req.body.curriculumImg) {
           try {
               const base64Data = req.body.curriculumImg.split(';base64,').pop();
               
               const result = await cloudinary.uploader.upload(
                   `data:application/pdf;base64,${base64Data}`,
                   {
                       resource_type: "raw",
                       use_filename: true,
                       unique_filename: true,
                       format: "pdf",
                       public_id: `curriculum_${req.user._id}_${Date.now()}`,
                       tags: ['curriculum'],
                       access_mode: "public"
                   }
               );
               
               updatedData.curriculumImg = `${result.secure_url}?dl=1`;
               console.log('Curriculum URL:', updatedData.curriculumImg);
           } catch (error) {
               console.error('Error uploading curriculum:', error);
               throw error;
           }
       }

       const user = await User.findByIdAndUpdate(
           req.user._id, 
           { $set: updatedData }, 
           { new: true }
       ).select("-password");
       
       res.json(user);
   } catch (error) {
       console.error("Error in updateProfile controller:", error);
       res.status(500).json({ message: "Server error" });
   }
};

// Funci√≥n para trabahar con los empresarios y su primer login  ‚Üì
export const completeFirstLoginSetup = async (req, res) => {
   try {
       const userId = req.user._id;
       
       // Check if user is empresario
       if (req.user.role !== 'empresario') {
           return res.status(403).json({ message: "Esta acci√≥n solo est√° permitida para usuarios con rol de empresario" });
       }
       
       // Get company info from request
       const { companyInfo } = req.body;
       
       // Update user with companyInfo and set isFirstLogin to false
       const user = await User.findByIdAndUpdate(
           userId, 
           { 
               $set: { 
                   isFirstLogin: false,
                   companyInfo: companyInfo || {}
               } 
           }, 
           { new: true }
       ).select("-password");
       
       if (!user) {
           return res.status(404).json({ message: "Usuario no encontrado" });
       }
       
       res.json({
           message: "Configuraci√≥n inicial completada exitosamente",
           user
       });
   } catch (error) {
       console.error("Error en completeFirstLoginSetup:", error);
       res.status(500).json({ message: "Error del servidor" });
   }
};

================
File: backend\emails\emailHandlers.js
================
import { mailtrapClient, sender } from "../lib/mailtrap.js";
import {
	createCommentNotificationEmailTemplate,
	createConnectionAcceptedEmailTemplate,
	createWelcomeEmailTemplate,
} from "./emailTemplates.js";

export const sendWelcomeEmail = async (email, name, profileUrl, role = 'egresado') => {
	const recipient = [{ email }];

	try {
		const response = await mailtrapClient.send({
			from: sender,
			to: recipient,
			subject: "Bienvenidos egresados de sistemas ITTG",
			html: createWelcomeEmailTemplate(name, profileUrl, role),
			category: "Bienvenido",
		});

		console.log("Welcome Email sent succesffully", response);
	} catch (error) {
		throw error;
	}
};

export const sendCommentNotificationEmail = async (
	recipientEmail,
	recipientName,
	commenterName,
	postUrl,
	commentContent
) => {
	const recipient = [{ email: recipientEmail }];

	try {
		const response = await mailtrapClient.send({
			from: sender,
			to: recipient,
			subject: "Comentaron tu post",
			html: createCommentNotificationEmailTemplate(recipientName, commenterName, postUrl, commentContent),
			category: "Notificaci√É¬≥n_comentario",
		});
		console.log("Comment Notification Email sent successfully", response);
	} catch (error) {
		throw error;
	}
};

export const sendConnectionAcceptedEmail = async (senderEmail, senderName, recipientName, profileUrl) => {
	const recipient = [{ email: senderEmail }];

	try {
		const response = await mailtrapClient.send({
			from: sender,
			to: recipient,
			subject: `${recipientName} se conecto contigo`,
			html: createConnectionAcceptedEmailTemplate(senderName, recipientName, profileUrl),
			category: "conexion_aceptada",
		});
	} catch (error) {}
};

================
File: backend\emails\emailTemplates.js
================
export function createWelcomeEmailTemplate(name, profileUrl, role = 'egresado') {
  let roleSpecificText = '';
  let additionalInfo = '';

  if (role === 'empresario') {
    roleSpecificText = "Como empresario, podr√° conectarse con egresados, publicar ofertas de trabajo y dar a conocer su empresa.";
    additionalInfo = `
      <div style="background-color: #f3f6f8; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #0077B5;">
        <p style="font-size: 16px; margin: 0; color: #0077B5;"><strong>¬°Importante!</strong></p>
        <p style="margin-top: 10px;">La primera vez que inicie sesi√≥n, aparecer√° un cuestionario para completar la informaci√≥n de su empresa. Esta informaci√≥n se mostrar√° en su perfil y ayudar√° a los egresados a conocer mejor su negocio.</p>
      </div>
    `;
  } else if (role === 'administrador') {
    roleSpecificText = "Como administrador, podr√° gestionar usuarios y supervisar la plataforma.";
  } else {
    roleSpecificText = "Explore conexiones para su carrera profesional.";
  }
      
  return `
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bienvenidos egresados ittg</title>
  </head>
  <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
    <div style="background: linear-gradient(to right, #0077B5, #00A0DC); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
      <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTSzFs7zNiYDWu_iddeOkErqpLlx16wvAxmhQ&s.svg" alt="tec Logo" style="width: 150px; margin-bottom: 20px;border-radius: 10px;">
      <h1 style="color: white; margin: 0; font-size: 28px;">Bienvenido a egresados ittg</h1>
    </div>
    <div style="background-color: #ffffff; padding: 30px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 10px rgba(0,0,0,0.1);">
      <p style="font-size: 18px; color: #0077B5;"><strong>Hola ${name},</strong></p>
      <p>${roleSpecificText}</p>
      ${additionalInfo}
      <div style="background-color: #f3f6f8; padding: 20px; border-radius: 8px; margin: 20px 0;">
        <p style="font-size: 16px; margin: 0;"><strong>Puedes iniciar con:</strong></p>
        <ul style="padding-left: 20px;">
          <li>Editar tu perfil</li>
          <li>Buscar contactos que te interesen</li>
        </ul>
      </div>
      <div style="text-align: center; margin: 30px 0;">
        <a href="${profileUrl}" style="background-color: #0077B5; color: white; padding: 14px 28px; text-decoration: none; border-radius: 30px; font-weight: bold; font-size: 16px; transition: background-color 0.3s;">Edita tu perfil</a>
      </div>
      <p>Puedes contactarnos para cualquier pregunta que necesites.</p>
      <p>Atentamente<br>Departamento de egresados</p>
    </div>
  </body>
  </html>
  `;
}

export const createConnectionAcceptedEmailTemplate = (senderName, recipientName, profileUrl) => `
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Conexi√≥n exitosa</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
<div style="background: linear-gradient(to right, #0077B5, #00A0DC); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
  <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTSzFs7zNiYDWu_iddeOkErqpLlx16wvAxmhQ&s.jpg" alt="logo_tec" style="width: 150px; margin-bottom: 20px;border-radius: 10px;"/>
  <h1 style="color: white; margin: 0; font-size: 28px;">Alguien se ha conectado contigo</h1>
</div>
<div style="background-color: #ffffff; padding: 30px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 10px rgba(0,0,0,0.1);">
  <p style="font-size: 18px; color: #0077B5;"><strong>Hola ${senderName},</strong></p>
  <p>El usuario<strong>${recipientName}</strong> acepto tu solicitud de conexi√≥n.</p>
  <div style="background-color: #f3f6f8; padding: 20px; border-radius: 8px; margin: 20px 0;">
    <p style="font-size: 16px; margin: 0;"><strong>Que sigue</strong></p>
    <ul style="padding-left: 20px;">
      <li>Mira el perfil de ${recipientName}</li>
      <li>Checa sus posts</li>
      <li>Busca intereses comunes</li>
    </ul>
  </div>
  <div style="text-align: center; margin: 30px 0;">
    <a href="${profileUrl}" style="background-color: #0077B5; color: white; padding: 14px 28px; text-decoration: none; border-radius: 30px; font-weight: bold; font-size: 16px; transition: background-color 0.3s;">Puedes ver el perfil de ${recipientName}</a>
  </div>
  <p>Busca m√°s contactos laborales</p>
  <p>Atentamente,<br>Departamento de egresados</p>
</div>
</body>
</html>
`;

export const createCommentNotificationEmailTemplate = (recipientName, commenterName, postUrl, commentContent) => `
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Nuevo comentario en tu post</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
<div style="background: linear-gradient(to right, #0077B5, #00A0DC); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
  <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTSzFs7zNiYDWu_iddeOkErqpLlx16wvAxmhQ&s.jpg" alt="Logo tec" style="width: 150px; margin-bottom: 20px;border-radius: 10px;"/>
  <h1 style="color: white; margin: 0; font-size: 28px;">Nuevo comentario en tu post</h1>
</div>
<div style="background-color: #ffffff; padding: 30px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 10px rgba(0,0,0,0.1);">
  <p style="font-size: 18px; color: #0077B5;"><strong>Hola ${recipientName},</strong></p>
  <p>${commenterName} Comento en tu post:</p>
  <div style="background-color: #f3f6f8; padding: 20px; border-radius: 8px; margin: 20px 0;">
    <p style="font-style: italic; margin: 0;">"${commentContent}"</p>
  </div>
  <div style="text-align: center; margin: 30px 0;">
    <a href=${postUrl} style="background-color: #0077B5; color: white; padding: 14px 28px; text-decoration: none; border-radius: 30px; font-weight: bold; font-size: 16px; transition: background-color 0.3s;">View Comment</a>
  </div>
  <p>Mantente conectado respondiendo a sus comentarios.</p>
  <p>Atentamente.<br>Departamento de egresados</p>
</div>
</body>
</html>
`;

================
File: backend\jobs\projectCleanup.js
================
// backend/jobs/projectCleanup.js
import axios from "axios";
import ProjectPost from "../models/projectPost.model.js";
import cloudinary from "../lib/cloudinary.js";

/**
 * Function to clean up expired projects
 * This should be run on a schedule (e.g., daily)
 */
export const cleanupExpiredProjects = async () => {
    try {
        console.log("Running cleanup job for expired projects...");
        
        // Update the status of any expired projects
        const now = new Date();
        await ProjectPost.updateMany(
            { expirationDate: { $lt: now }, status: { $ne: "expired" } },
            { status: "expired" }
        );
        
        // Calculate threshold for deletion (7 days after expiration)
        const deleteThreshold = new Date();
        deleteThreshold.setDate(deleteThreshold.getDate() - 7);
        
        // Find projects to delete
        const projectsToDelete = await ProjectPost.find({
            status: "expired",
            expirationDate: { $lt: deleteThreshold }
        });
        
        console.log(`Found ${projectsToDelete.length} expired projects to delete.`);
        
        // Delete images from cloudinary
        for (const project of projectsToDelete) {
            if (project.image) {
                try {
                    const publicId = project.image.split('/').pop().split('.')[0];
                    await cloudinary.uploader.destroy(publicId);
                    console.log(`Deleted image for project ${project._id}`);
                } catch (error) {
                    console.error(`Error deleting image for project ${project._id}:`, error);
                }
            }
        }
        
        // Delete the projects from database
        const result = await ProjectPost.deleteMany({
            status: "expired",
            expirationDate: { $lt: deleteThreshold }
        });
        
        console.log(`Successfully deleted ${result.deletedCount} expired projects.`);
        
        return {
            success: true,
            deletedCount: result.deletedCount
        };
    } catch (error) {
        console.error("Error in project cleanup job:", error);
        return {
            success: false,
            error: error.message
        };
    }
};

// If you want to run this as a standalone script
if (process.env.NODE_ENV !== 'test') {
    // This can be called from a cron job or similar scheduled task
    // For example, using node-cron:
    // import cron from 'node-cron';
    // cron.schedule('0 0 * * *', cleanupExpiredProjects); // Run daily at midnight
}

export default cleanupExpiredProjects;

================
File: backend\lib\cloudinary.js
================
import { v2 as cloudinary } from "cloudinary";
import dotenv from "dotenv";

dotenv.config();

cloudinary.config({
	cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
	api_key: process.env.CLOUDINARY_API_KEY,
	api_secret: process.env.CLOUDINARY_API_SECRET,
});

export default cloudinary;

================
File: backend\lib\db.js
================
import mongoose from "mongoose";

export const connectDB = async () => {
	try {
		const conn = await mongoose.connect(process.env.MONGO_URI);
		console.log(`MongoDB connected: ${conn.connection.host}`);
	} catch (error) {
		console.error(`Error connecting to MongoDB: ${error.message}`);
		process.exit(1);
	}
};

================
File: backend\lib\mailtrap.js
================
import { MailtrapClient } from "mailtrap";
import dotenv from "dotenv";

dotenv.config();

const TOKEN = process.env.MAILTRAP_TOKEN;

export const mailtrapClient = new MailtrapClient({
	token: TOKEN,
});

export const sender = {
	email: process.env.EMAIL_FROM,
	name: process.env.EMAIL_FROM_NAME,
};

================
File: backend\middleware\admin.middleware.js
================
// backend/middleware/admin.middleware.js
export const isAdmin = async (req, res, next) => {
    try {
        if (req.user.role !== 'administrador') {
            return res.status(403).json({ message: "Acceso denegado. Solo administradores." });
        }
        next();
    } catch (error) {
        console.log("Error in isAdmin middleware:", error.message);
        res.status(500).json({ message: "Error del servidor" });
    }
};

================
File: backend\middleware\auth.middleware.js
================
import jwt from "jsonwebtoken";
import User from "../models/user.model.js";

export const protectRoute = async (req, res, next) => {
	try {
		const token = req.cookies["jwt-linkedin"];

		if (!token) {
			return res.status(401).json({ message: "Unauthorized - No Token Provided" });
		}

		const decoded = jwt.verify(token, process.env.JWT_SECRET);
		if (!decoded) {
			return res.status(401).json({ message: "Unauthorized - Invalid Token" });
		}

		const user = await User.findById(decoded.userId).select("-password");

		if (!user) {
			return res.status(401).json({ message: "User not found" });
		}

		req.user = user;

		next();
	} catch (error) {
		console.log("Error in protectRoute middleware:", error.message);
		res.status(500).json({ message: "Internal server error" });
	}
};

================
File: backend\models\announcement.model.js
================
import mongoose from "mongoose";

const announcementSchema = new mongoose.Schema(
  {
    author: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "User", 
      required: true 
    },
    content: { 
      type: String,
      required: true 
    },
    image: { 
      type: String 
    }
  },
  { timestamps: true }
);

const Announcement = mongoose.model("Announcement", announcementSchema);

export default Announcement;

================
File: backend\models\bannedUser.model.js
================
import mongoose from "mongoose";

const bannedUserSchema = new mongoose.Schema(
  {
    studentId: {
      type: String,
      required: true,
      unique: true
    },
    email: {
      type: String,
      required: true
    },
    reason: {
      type: String,
      default: ""
    },
    bannedBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true
    },
    bannedAt: {
      type: Date,
      default: Date.now
    }
  },
  { timestamps: true }
);

const BannedUser = mongoose.model("BannedUser", bannedUserSchema);
export default BannedUser;

================
File: backend\models\connectionRequest.model.js
================
import mongoose from "mongoose";

const connectionRequestSchema = new mongoose.Schema(
	{
		sender: {
			type: mongoose.Schema.Types.ObjectId,
			ref: "User",
			required: true,
		},
		recipient: {
			type: mongoose.Schema.Types.ObjectId,
			ref: "User",
			required: true,
		},
		status: {
			type: String,
			enum: ["pending", "accepted", "rejected"],
			default: "pending",
		},
	},
	{ timestamps: true }
);

const ConnectionRequest = mongoose.model("ConnectionRequest", connectionRequestSchema);

export default ConnectionRequest;

================
File: backend\models\notification.model.js
================
// backend/models/notification.model.js
import mongoose from "mongoose";

const notificationSchema = new mongoose.Schema(
    {
        recipient: {
            type: mongoose.Schema.Types.ObjectId,
            ref: "User",
            required: true,
        },
        type: {
            type: String,
            required: true,
            enum: [
                "like", 
                "comment", 
                "connectionAccepted",
                "projectInterest",   // New type for project interest
                "projectComment",    // New type for project comments
                "projectLike",       // New type for project likes
                "projectExpired"     // New type for expired projects
            ],
        },
        relatedUser: {
            type: mongoose.Schema.Types.ObjectId,
            ref: "User",
        },
        relatedPost: {
            type: mongoose.Schema.Types.ObjectId,
            ref: "Post",
        },
        relatedProject: {           // New field for project-related notifications
            type: mongoose.Schema.Types.ObjectId,
            ref: "ProjectPost",
        },
        read: {
            type: Boolean,
            default: false,
        },
    },
    { timestamps: true }
);

const Notification = mongoose.model("Notification", notificationSchema);

export default Notification;

================
File: backend\models\post.model.js
================
import mongoose from "mongoose";

const postSchema = new mongoose.Schema(
	{
		author: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
		content: { type: String },
		image: { type: String },
		likes: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],
		comments: [
			{
				content: { type: String },
				user: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
				createdAt: { type: Date, default: Date.now },
			},
		],
	},
	{ timestamps: true }
);

const Post = mongoose.model("Post", postSchema);

export default Post;

================
File: backend\models\projectPost.model.js
================
// backend/models/projectPost.model.js
import mongoose from "mongoose";

const projectPostSchema = new mongoose.Schema(
    {
        author: { 
            type: mongoose.Schema.Types.ObjectId, 
            ref: "User", 
            required: true 
        },
        title: { 
            type: String, 
            required: true 
        },
        content: { 
            type: String, 
            required: true 
        },
        image: { 
            type: String 
        },
        likes: [{ 
            type: mongoose.Schema.Types.ObjectId, 
            ref: "User" 
        }],
        comments: [
            {
                content: { type: String },
                user: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
                createdAt: { type: Date, default: Date.now },
            },
        ],
        interestedUsers: [
            {
                user: { 
                    type: mongoose.Schema.Types.ObjectId, 
                    ref: "User" 
                },
                createdAt: { 
                    type: Date, 
                    default: Date.now 
                },
            },
        ],
        expirationDate: {
            type: Date,
            default: function() {
                const date = new Date();
                date.setDate(date.getDate() + 30);
                return date;
            },
            required: true
        },
        status: {
            type: String,
            enum: ["active", "completed", "expired"],
            default: "active"
        },
        projectRequirements: { 
            type: String 
        },
        projectGoals: { 
            type: String 
        }
    },
    { timestamps: true }
);

// Indexes
projectPostSchema.index({ expirationDate: 1 });
projectPostSchema.index({ status: 1 });
projectPostSchema.index({ author: 1 });

// Virtual field to check if project is expired
projectPostSchema.virtual('isExpired').get(function() {
    return new Date() > this.expirationDate;
});

// Function to update expired projects
const updateExpiredProjects = async () => {
    try {
        await mongoose.model('ProjectPost').updateMany(
            { 
                status: 'active',
                expirationDate: { $lt: new Date() }
            },
            { 
                $set: { status: 'expired' }
            }
        );
    } catch (error) {
        console.error('Error updating expired projects:', error);
    }
};

// Middleware to update expired projects before find operations
projectPostSchema.pre(['find', 'findOne'], async function() {
    // Only update if we're not specifically querying expired projects
    if (!this._conditions.status || this._conditions.status !== 'expired') {
        await updateExpiredProjects();
    }
});

const ProjectPost = mongoose.model("ProjectPost", projectPostSchema);

export default ProjectPost;

================
File: backend\models\user.model.js
================
import mongoose from "mongoose";
const userSchema = new mongoose.Schema(
    {
        name: {
            type: String,
            required: true,
        },
        username: { type: String, required: true, unique: true },
        email: { type: String, required: true, unique: true },
        password: { type: String, required: true },
        studentId: { type: String, unique: true }, // Added field for student ID
        role: {
            type: String,
            enum: ['egresado', 'empresario', 'administrador'],
            default: 'egresado'
        },
        // Esto lo usamos para checar si el empresario se estal loggeando por primera vez y enviarlo a llenar su cuestionario si es el caso 
        isFirstLogin: {
        type: Boolean,
        default: function() {
        // esta en default solo para los empresarios
        return this.role === 'empresario';
    }
},
        profilePicture: {
            type: String,
            default: "",
        },
        bannerImg: {
            type: String,
            default: "",
        },
        curriculumImg: {
            type: String,
            default: "",
        },
        headline: {
            type: String,
            default: "Egresado",
        },
        location: {
            type: String,
            default: "M√É¬©xico",
        },
        about: {
            type: String,
            default: "",
        },
        skills: [String],
        experience: [
            {
                title: String,
                company: String,
                startDate: Date,
                endDate: Date,
                description: String,
            },
        ],
        education: [
            {
                school: String,
                fieldOfStudy: String,
                startYear: Number,
                endYear: Number,
            },
        ],
        connections: [
            {
                type: mongoose.Schema.Types.ObjectId,
                ref: "User",
            },
        ],
        // New company fields (only used if role is 'empresario')
        companyInfo: {
            companyName: { type: String, default: "" },
            industry: { type: String, default: "" },
            foundedYear: { type: Number },
            website: { type: String, default: "" },
            employees: { type: String, default: "" }, // Size range like "1-10", "11-50", etc.
            description: { type: String, default: "" },
            logo: { type: String, default: "" },
            location: { type: String, default: "" },
            contactEmail: { type: String, default: "" },
            contactPhone: { type: String, default: "" }
        }
    },
    { timestamps: true }
);

const User = mongoose.model("User", userSchema);
export default User;

================
File: backend\routes\admin.route.js
================
// backend/routes/admin.route.js
import express from "express";
import { protectRoute } from "../middleware/auth.middleware.js";
import { isAdmin } from "../middleware/admin.middleware.js";
import { createUser, getAllUsers, updateUserRole, deleteUser } from "../controllers/admin.controller.js";
import { 
  banUser,
  getBannedUsers,
  unbanUser
} from "../controllers/admin.controller.js";




const router = express.Router();

router.post("/users", protectRoute, isAdmin, createUser);
router.get("/users", protectRoute, isAdmin, getAllUsers);
router.put("/users/:id/role", protectRoute, isAdmin, updateUserRole);
router.delete("/users/:id", protectRoute, isAdmin, deleteUser);

// New ban routes
router.post("/users/:userId/ban", protectRoute, isAdmin, banUser);
router.get("/banned-users", protectRoute, isAdmin, getBannedUsers);
router.delete("/banned-users/:studentId", protectRoute, isAdmin, unbanUser);

export default router;

================
File: backend\routes\announcement.route.js
================
import express from "express";
import { protectRoute } from "../middleware/auth.middleware.js";
import { isAdmin } from "../middleware/admin.middleware.js";
import {
  getAnnouncements,
  createAnnouncement,
  deleteAnnouncement
} from "../controllers/announcement.controller.js";

const router = express.Router();

// Get all announcements (accessible to students and admins)
router.get("/", protectRoute, getAnnouncements);

// Create a new announcement (admin only)
router.post("/create", protectRoute, isAdmin, createAnnouncement);

// Delete an announcement (admin only)
router.delete("/:id", protectRoute, isAdmin, deleteAnnouncement);

export default router;

================
File: backend\routes\auth.route.js
================
import express from "express";
import { login, logout, signup, getCurrentUser } from "../controllers/auth.controller.js";
import { protectRoute } from "../middleware/auth.middleware.js";

const router = express.Router();

router.post("/signup", signup);
router.post("/login", login);
router.post("/logout", logout);

router.get("/me", protectRoute, getCurrentUser);

export default router;

================
File: backend\routes\connection.route.js
================
import express from "express";
import { protectRoute } from "../middleware/auth.middleware.js";
import {
	acceptConnectionRequest,
	getConnectionRequests,
	getConnectionStatus,
	getUserConnections,
	rejectConnectionRequest,
	removeConnection,
	sendConnectionRequest,
} from "../controllers/connection.controller.js";

const router = express.Router();

router.post("/request/:userId", protectRoute, sendConnectionRequest);
router.put("/accept/:requestId", protectRoute, acceptConnectionRequest);
router.put("/reject/:requestId", protectRoute, rejectConnectionRequest);
// Get all connection requests for the current user
router.get("/requests", protectRoute, getConnectionRequests);
// Get all connections for a user
router.get("/", protectRoute, getUserConnections);
router.delete("/:userId", protectRoute, removeConnection);
router.get("/status/:userId", protectRoute, getConnectionStatus);

export default router;

================
File: backend\routes\notification.route.js
================
import express from "express";
import { protectRoute } from "../middleware/auth.middleware.js";
import {
	deleteNotification,
	getUserNotifications,
	markNotificationAsRead,
} from "../controllers/notification.controller.js";

const router = express.Router();

router.get("/", protectRoute, getUserNotifications);

router.put("/:id/read", protectRoute, markNotificationAsRead);
router.delete("/:id", protectRoute, deleteNotification);

export default router;

================
File: backend\routes\post.route.js
================
import express from "express";
import { protectRoute } from "../middleware/auth.middleware.js";
import {
	createPost,
	getFeedPosts,
	deletePost,
	getPostById,
	createComment,
	likePost,
} from "../controllers/post.controller.js";

const router = express.Router();

router.get("/", protectRoute, getFeedPosts);
router.post("/create", protectRoute, createPost);
router.delete("/delete/:id", protectRoute, deletePost);
router.get("/:id", protectRoute, getPostById);
router.post("/:id/comment", protectRoute, createComment);
router.post("/:id/like", protectRoute, likePost);

export default router;

================
File: backend\routes\project.route.js
================
// backend/routes/project.route.js
import express from "express";
import { protectRoute } from "../middleware/auth.middleware.js";
import {
    getProjects,
    createProject,
    getProjectById,
    updateProject,
    deleteProject,
    toggleInterestInProject,
    addCommentToProject,
    likeProject
} from "../controllers/project.controller.js";

const router = express.Router();

// Get all projects (with filtering options)
router.get("/", protectRoute, getProjects);

// Create a new project
router.post("/create", protectRoute, createProject);

// Get a specific project
router.get("/:id", protectRoute, getProjectById);

// Update a project
router.put("/:id", protectRoute, updateProject);

// Delete a project
router.delete("/:id", protectRoute, deleteProject);

// Toggle interest in a project
router.post("/:id/interest", protectRoute, toggleInterestInProject);

// Add a comment to a project
router.post("/:id/comment", protectRoute, addCommentToProject);

// Like a project
router.post("/:id/like", protectRoute, likeProject);

export default router;

================
File: backend\routes\user.route.js
================
import express from "express";
import { protectRoute } from "../middleware/auth.middleware.js";
import { getSuggestedConnections, getPublicProfile, updateProfile,completeFirstLoginSetup } from "../controllers/user.controller.js";

const router = express.Router();

router.get("/suggestions", protectRoute, getSuggestedConnections);
router.get("/:username", protectRoute, getPublicProfile);

router.put("/profile", protectRoute, updateProfile);
router.put("/complete-first-login", protectRoute, completeFirstLoginSetup);

export default router;

================
File: frontend\eslint.config.js
================
import js from "@eslint/js";
import globals from "globals";
import react from "eslint-plugin-react";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";

export default [
	{ ignores: ["dist"] },
	{
		files: ["**/*.{js,jsx}"],
		languageOptions: {
			ecmaVersion: 2020,
			globals: globals.browser,
			parserOptions: {
				ecmaVersion: "latest",
				ecmaFeatures: { jsx: true },
				sourceType: "module",
			},
		},
		settings: { react: { version: "18.3" } },
		plugins: {
			react,
			"react-hooks": reactHooks,
			"react-refresh": reactRefresh,
		},
		rules: {
			...js.configs.recommended.rules,
			...react.configs.recommended.rules,
			...react.configs["jsx-runtime"].rules,
			...reactHooks.configs.recommended.rules,
			"react/jsx-no-target-blank": "off",
			"react-refresh/only-export-components": ["warn", { allowConstantExport: true }],
			"react/prop-types": "off",
		},
	},
];

================
File: frontend\index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/small-logo.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Egresados ITTG</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: frontend\package.json
================
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tanstack/react-query": "^5.55.0",
    "axios": "^1.7.7",
    "date-fns": "^3.6.0",
    "linkedin-clone": "file:..",
    "lucide-react": "^0.439.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hot-toast": "^2.4.1",
    "react-router-dom": "^6.26.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.20",
    "daisyui": "^4.12.10",
    "eslint": "^9.9.0",
    "eslint-plugin-react": "^7.35.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "postcss": "^8.4.45",
    "tailwindcss": "^3.4.10",
    "vite": "^5.4.1"
  }
}

================
File: frontend\postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: frontend\README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

================
File: frontend\tailwind.config.js
================
import daisyui from "daisyui";

/** @type {import('tailwindcss').Config} */
export default {
	content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
	theme: {
		extend: {},
	},
	plugins: [daisyui],
	daisyui: {
		themes: [
			{
				linkedin: {
					primary: "#0A66C2", // LinkedIn Blue
					secondary: "#FFFFFF", // White
					accent: "#7FC15E", // LinkedIn Green (for accents)
					neutral: "#000000", // Black (for text)
					"base-100": "#F3F2EF", // Light Gray (background)
					info: "#5E5E5E", // Dark Gray (for secondary text)
					success: "#057642", // Dark Green (for success messages)
					warning: "#F5C75D", // Yellow (for warnings)
					error: "#CC1016", // Red (for errors)
				},
			},
		],
	},
};

================
File: frontend\vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})

================
File: frontend\public\logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" height="800" width="1200" viewBox="-40.125525 -16.3118 347.75455 97.8708"><path fill="#0a66c2" d="M263.744 61.1094a1.2 1.2 0 001.21-1.269c0-.9-.543-1.33-1.657-1.33h-1.8v4.712h.677v-2.054h.832l.019.025 1.291 2.029h.724l-1.389-2.1zm-.783-.472h-.785v-1.593h.995c.514 0 1.1.084 1.1.757 0 .774-.593.836-1.314.836M0 9.5874h9.993v36.4h18.5v9.222H0zm32.911 14.689h9.6v30.916h-9.6zm4.8-15.37a5.569 5.569 0 11-5.57 5.569 5.569 5.569 0 015.57-5.569m44.958.674h9.6v27.265l10.88-12.583h11.77l-12.6 14.313 12.335 16.63h-12.066l-10.191-15.282h-.126v15.28h-9.6zm-34.835 14.699h9.219v4.225h.131a10.085 10.085 0 019.09-4.994c9.735 0 11.527 6.405 11.527 14.726v16.954h-9.6v-15.031c0-3.588-.066-8.2-5-8.2-4.99 0-5.76 3.907-5.76 7.939v15.288h-9.6z"/><path fill="#0a66c2" d="M135.136 36.1384a5.756 5.756 0 00-5.894-5.89 6.406 6.406 0 00-6.784 5.89zm8.132 13.7a16.909 16.909 0 01-13.128 6.151c-9.6 0-17.286-6.408-17.286-16.331 0-9.923 7.685-16.328 17.286-16.328 8.973 0 14.6 6.4 14.6 16.328v3.01h-22.282a7.171 7.171 0 007.235 6.019 8.193 8.193 0 006.851-3.778zm21.482-18.089c-4.8 0-7.68 3.205-7.68 7.875s2.879 7.878 7.68 7.878 7.687-3.2 7.687-7.878-2.881-7.875-7.687-7.875m16.525 23.437h-8.838v-4.1h-.131a12.071 12.071 0 01-9.544 4.868c-9.224 0-15.3-6.657-15.3-16.071 0-8.646 5.377-16.585 14.216-16.585 3.973 0 7.684 1.087 9.861 4.1h.126V9.5774h9.609zm64.809.018h-9.6v-15.034c0-3.585-.064-8.2-4.993-8.2-5 0-5.765 3.906-5.765 7.939v15.294h-9.6v-30.916h9.216v4.225h.129a10.1 10.1 0 019.093-4.994c9.73 0 11.524 6.4 11.524 14.726zm-40.79-35.143a5.571 5.571 0 115.57-5.572 5.571 5.571 0 01-5.57 5.572m4.8 35.143h-9.61v-30.917h9.61zm40.776-55.2h-55.21a4.728 4.728 0 00-4.781 4.67v55.439a4.731 4.731 0 004.781 4.675h55.21a4.741 4.741 0 004.8-4.675V4.6704a4.738 4.738 0 00-4.8-4.67m12.173 56.411a4.418 4.418 0 10.085 0h-.085m0 8.33a3.874 3.874 0 113.809-3.938v.065a3.791 3.791 0 01-3.708 3.871h-.1"/></svg>

================
File: frontend\public\teclogoazul.svg
================
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="512.000000pt" height="512.000000pt" viewBox="0 0 512.000000 512.000000"
 preserveAspectRatio="xMidYMid meet">

<g transform="translate(0.000000,512.000000) scale(0.100000,-0.100000)"
fill="#000000" stroke="none">
<path d="M759 4935 c-15 -8 -30 -22 -34 -32 -4 -10 -28 -110 -54 -221 l-46
-204 -145 -48 c-80 -27 -160 -54 -178 -61 l-32 -13 0 -267 0 -266 178 -7 c627
-25 1005 -124 1442 -379 84 -49 95 -53 98 -36 7 42 -57 250 -97 315 -26 42
-192 152 -355 234 -208 105 -468 180 -679 197 -43 3 -80 9 -82 13 -7 11 95 28
242 42 273 25 578 -34 836 -163 177 -88 289 -169 438 -318 246 -246 390 -508
459 -836 28 -132 37 -360 20 -503 -11 -96 -62 -327 -74 -340 -3 -3 -33 3 -68
13 -146 41 -278 28 -379 -36 l-46 -29 14 -53 c38 -144 23 -306 -40 -421 -51
-93 -132 -146 -249 -161 -46 -6 -48 -7 -48 -40 0 -53 -34 -147 -74 -208 -83
-125 -219 -212 -415 -265 -84 -22 -116 -26 -256 -26 -141 -1 -166 2 -215 21
-45 17 -81 22 -195 25 -130 4 -147 7 -240 40 -55 19 -126 47 -157 61 l-58 27
0 -104 0 -104 72 -35 c65 -32 187 -75 259 -92 25 -6 27 -15 69 -208 41 -187
47 -204 76 -235 l33 -33 360 3 361 3 25 25 c21 21 32 58 69 233 24 115 47 211
49 214 3 3 58 22 122 44 l117 39 160 -141 c177 -156 200 -167 261 -131 46 26
455 328 490 360 15 14 31 42 37 61 10 36 -2 67 -133 352 l-35 76 59 84 c101
143 76 129 209 114 63 -8 165 -17 225 -20 108 -7 110 -7 133 18 16 17 53 118
118 323 92 293 104 347 84 383 -5 10 -95 67 -200 127 l-190 108 0 127 0 127
192 114 c152 90 195 120 203 142 8 23 -7 77 -94 339 -57 172 -110 322 -118
335 -25 40 -48 42 -269 16 -115 -13 -212 -23 -216 -22 -4 2 -41 48 -82 102
-73 97 -74 100 -62 130 7 17 45 106 85 198 39 92 71 178 71 192 0 14 -12 39
-27 55 -39 41 -520 380 -550 387 -39 10 -71 -11 -232 -159 l-150 -138 -98 31
c-54 18 -109 35 -122 39 -23 7 -28 22 -72 222 -42 188 -51 217 -74 237 -26 22
-28 22 -363 22 -273 -1 -342 -4 -363 -15z"/>
<path d="M264 3726 c-11 -44 10 -76 49 -76 137 0 588 -78 747 -129 l91 -29 14
35 c8 19 24 48 36 64 12 17 20 32 18 33 -2 2 -58 17 -124 34 -218 55 -387 78
-667 89 l-157 6 -7 -27z"/>
<path d="M2010 3591 c36 -93 53 -207 47 -310 -4 -53 -9 -108 -12 -122 -6 -25
-3 -27 72 -54 157 -55 281 -132 323 -199 30 -49 30 -134 0 -174 -22 -30 -20
-52 4 -52 7 0 33 18 58 40 62 54 90 122 96 230 14 288 -184 540 -528 669 -78
30 -81 29 -60 -28z"/>
<path d="M264 3564 c-4 -14 -2 -39 2 -57 l9 -31 175 -32 c222 -41 453 -93 573
-130 16 -5 18 1 15 72 l-3 78 -50 13 c-154 41 -592 113 -682 113 -27 0 -34 -5
-39 -26z"/>
<path d="M1323 3570 c-149 -76 -95 -302 72 -302 119 0 195 117 147 224 -38 87
-134 121 -219 78z m176 -64 c21 -25 9 -69 -21 -80 -50 -17 -89 42 -52 78 19
20 58 21 73 2z"/>
<path d="M1645 3413 c-13 -87 -61 -155 -140 -196 -56 -30 -164 -30 -221 0 -71
37 -134 126 -134 187 0 27 -35 43 -44 19 -30 -77 46 -257 133 -317 l37 -26
100 15 c54 8 134 15 178 15 92 0 267 -24 327 -45 23 -8 47 -15 54 -15 15 0 43
95 54 184 l7 67 -30 19 c-33 20 -257 122 -292 134 -19 6 -22 2 -29 -41z"/>
<path d="M264 3374 c-6 -25 1 -113 11 -122 10 -10 360 -116 525 -158 127 -33
203 -47 278 -51 56 -3 102 -3 102 1 0 4 -19 30 -41 59 -23 29 -50 71 -61 94
-20 46 -11 42 -173 82 -108 26 -598 121 -629 121 -3 0 -9 -12 -12 -26z"/>
<path d="M270 3141 c-18 -34 -9 -246 12 -266 2 -2 91 3 198 10 107 8 253 14
323 15 l128 0 60 42 59 42 -107 18 c-125 21 -299 62 -500 118 -78 22 -147 40
-152 40 -6 0 -15 -9 -21 -19z"/>
<path d="M2005 3012 c-9 -31 -18 -64 -21 -73 -3 -12 -21 -18 -62 -22 -60 -5
-151 -43 -136 -56 15 -13 90 -31 129 -31 32 0 36 -2 25 -15 -7 -8 -21 -15 -32
-15 -10 0 -16 -4 -13 -10 3 -5 1 -18 -5 -29 -10 -19 -12 -19 -58 -5 -81 27
-79 25 -47 39 l30 13 -28 11 c-47 18 -66 13 -113 -35 -110 -109 -139 -295 -67
-427 30 -54 79 -97 144 -127 56 -25 73 -25 127 1 42 21 44 24 39 55 -4 24 -2
34 7 34 20 0 47 35 36 46 -5 5 -6 22 -2 39 8 28 13 30 67 36 40 5 63 13 72 25
28 39 9 132 -60 291 -41 94 -37 105 36 109 53 2 78 33 85 102 5 54 10 49 -85
82 l-52 19 -16 -57z"/>
<path d="M1410 3039 c-138 -15 -303 -68 -373 -121 -16 -12 -5 -14 81 -15 234
-4 353 -54 381 -160 7 -26 7 -26 34 19 34 59 90 117 146 152 50 32 142 66 178
66 35 0 27 16 -14 28 -109 31 -301 45 -433 31z"/>
<path d="M580 2839 c-202 -11 -292 -24 -307 -45 -17 -23 -17 -105 0 -126 10
-13 48 -17 232 -22 121 -3 263 -10 315 -16 102 -11 333 -48 357 -57 10 -4 8 6
-8 36 -30 57 -23 127 18 185 l30 43 -150 6 c-174 8 -298 7 -487 -4z"/>
<path d="M1250 2772 c-57 -58 -45 -153 25 -186 41 -20 68 -20 105 -1 42 21 60
53 60 103 0 37 -6 50 -34 78 -29 29 -41 34 -81 34 -38 0 -52 -5 -75 -28z m120
-42 c40 -40 13 -100 -45 -100 -40 0 -55 16 -55 56 0 56 61 83 100 44z"/>
<path d="M1290 2685 c0 -10 11 -15 35 -15 24 0 35 5 35 15 0 10 -11 15 -35 15
-24 0 -35 -5 -35 -15z"/>
<path d="M289 2583 c-22 -5 -28 -58 -22 -187 5 -82 9 -106 20 -106 8 0 74 36
148 79 73 44 189 108 257 143 l123 62 -55 7 c-60 8 -445 9 -471 2z"/>
<path d="M1450 2560 c-14 -14 -33 -29 -43 -35 -15 -9 -14 -15 11 -64 28 -56
145 -191 156 -180 4 4 -7 28 -23 54 -36 57 -58 121 -69 195 l-7 55 -25 -25z"/>
<path d="M855 2558 c-45 -25 -328 -207 -447 -286 -105 -70 -131 -92 -148 -126
-31 -66 -44 -190 -31 -302 12 -99 39 -195 56 -201 6 -2 51 63 100 144 192 314
353 548 484 698 42 48 56 72 48 77 -17 11 -39 9 -62 -4z"/>
<path d="M946 2469 c-190 -241 -414 -598 -580 -929 -168 -333 -166 -326 -99
-401 76 -84 202 -126 404 -136 l126 -6 7 149 c25 534 104 962 241 1301 19 48
33 88 32 90 -2 1 -17 6 -34 9 -29 6 -35 1 -97 -77z"/>
<path d="M1112 2451 c-70 -182 -122 -481 -143 -816 -14 -219 -6 -662 11 -679
7 -7 70 -12 158 -14 170 -4 275 15 391 70 92 43 190 143 219 221 35 93 31 106
-40 147 -77 44 -196 154 -252 234 -137 192 -199 418 -199 719 l0 167 -36 9
c-86 21 -77 26 -109 -58z"/>
<path d="M1292 2378 c18 -378 229 -752 501 -888 98 -49 139 -58 182 -37 59 28
122 121 161 237 21 63 26 222 8 240 -9 9 -29 6 -79 -9 -156 -48 -329 -3 -491
127 -116 94 -227 261 -255 387 -20 92 -32 66 -27 -57z"/>
<path d="M1344 2463 c3 -16 28 -71 53 -123 107 -214 345 -378 516 -356 53 7
135 44 156 70 12 14 10 16 -16 16 -45 0 -120 26 -163 55 -30 21 -54 28 -99 30
-89 5 -162 30 -228 78 -76 57 -124 113 -162 193 -19 40 -37 64 -47 64 -12 0
-15 -6 -10 -27z"/>
</g>
</svg>

================
File: frontend\public\vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: frontend\src\App.jsx
================
// frontend/src/App.jsx
import React, { useState, useEffect } from 'react';
import { Navigate, Route, Routes } from "react-router-dom";
import Layout from "./components/layout/Layout";

import HomePage from "./pages/HomePage";
import LoginPage from "./pages/auth/LoginPage";
import SignUpPage from "./pages/auth/SignUpPage";
import toast, { Toaster } from "react-hot-toast";
import { useQuery } from "@tanstack/react-query";
import { axiosInstance } from "./lib/axios";
import NotificationsPage from "./pages/NotificationsPage";
import NetworkPage from "./pages/NetworkPage";
import PostPage from "./pages/PostPage";
import ProfilePage from "./pages/ProfilePage";
import AdminDashboardPage from "./pages/AdminDashboardPage";
import ProjectsPage from "./pages/ProjectsPage";
//import AnnouncementsPage from "./pages/AnnouncementsPage";

// Import the questionnaire modal component
import QuestionnaireModal from "./components/QuestionnaireModal";

function App() {
    // State to control the questionnaire modal visibility
    const [showQuestionnaire, setShowQuestionnaire] = useState(false);
    
    const { data: authUser, isLoading } = useQuery({
        queryKey: ["authUser"],
        queryFn: async () => {
            try {
                const res = await axiosInstance.get("/auth/me");
                return res.data;
            } catch (err) {
                if (err.response && err.response.status === 401) {
                    return null;
                }
                toast.error(err.response?.data?.message || "Something went wrong");
                return null;
            }
        },
        retry: false,
        refetchOnWindowFocus: true,
    });
    
    // Effect to check if the user is an empresario and on their first login
    useEffect(() => {
        if (authUser && authUser.role === 'empresario' && authUser.isFirstLogin) {
            setShowQuestionnaire(true);
        } else {
            setShowQuestionnaire(false);
        }
    }, [authUser]);

    if (isLoading) {
        return (
            <div className="min-h-screen flex items-center justify-center">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <Layout>
            {/* Questionnaire Modal for empresario users on first login */}
            {showQuestionnaire && (
                <QuestionnaireModal
                    isOpen={showQuestionnaire}
                    onClose={() => setShowQuestionnaire(false)}
                    user={authUser}
                />
            )}
            
            <Routes>
                <Route 
                    path="/" 
                    element={authUser ? <HomePage /> : <Navigate to="/login" />} 
                />
                <Route 
                    path="/login" 
                    element={!authUser ? <LoginPage /> : <Navigate to="/" />} 
                />
                <Route 
                    path="/signup" 
                    element={!authUser ? <SignUpPage /> : <Navigate to="/" />} 
                />
                <Route 
                    path="/notifications" 
                    element={authUser ? <NotificationsPage /> : <Navigate to="/login" />} 
                />
                <Route 
                    path="/network" 
                    element={authUser ? <NetworkPage /> : <Navigate to="/login" />} 
                />
                <Route 
                    path="/projects" 
                    element={authUser ? <ProjectsPage /> : <Navigate to="/login" />} 
                />
                <Route 
                    path="/announcements" 
                    element={
                        authUser ? 
                            (authUser.role === 'administrador' || authUser.role === 'egresado') ? 
                                <AnnouncementsPage /> : 
                                <Navigate to="/" /> 
                        : <Navigate to="/login" />
                    } 
                />
                <Route 
                    path="/post/:postId" 
                    element={authUser ? <PostPage /> : <Navigate to="/login" />} 
                />
                <Route 
                    path="/profile/:username" 
                    element={authUser ? <ProfilePage /> : <Navigate to="/login" />} 
                />
                <Route 
                    path="/admin" 
                    element={
                        authUser && authUser.role === 'administrador' 
                            ? <AdminDashboardPage /> 
                            : <Navigate to="/" />
                    } 
                />
            </Routes>
            <Toaster 
                position="top-center"
                reverseOrder={false}
                toastOptions={{
                    duration: 3000,
                    style: {
                        background: '#363636',
                        color: '#fff',
                    },
                }}
            />
        </Layout>
    );
}

export default App;

================
File: frontend\src\index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: frontend\src\main.jsx
================
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import App from "./App.jsx";
import "./index.css";
import { BrowserRouter } from "react-router-dom";

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

const queryClient = new QueryClient();

createRoot(document.getElementById("root")).render(
	<StrictMode>
		<BrowserRouter>
			<QueryClientProvider client={queryClient}>
				<App />
			</QueryClientProvider>
		</BrowserRouter>
	</StrictMode>
);

================
File: frontend\src\components\AboutSection.jsx
================
import { useState } from "react";

const AboutSection = ({ userData, isOwnProfile, onSave }) => {
	const [isEditing, setIsEditing] = useState(false);
	const [about, setAbout] = useState(userData.about || "");

	const handleSave = () => {
		setIsEditing(false);
		onSave({ about });
	};
	return (
		<div className='bg-white shadow rounded-lg p-6 mb-6'>
			<h2 className='text-xl font-semibold mb-4'>Acerca de mi</h2>
			{isOwnProfile && (
				<>
					{isEditing ? (
						<>
							<textarea
								value={about}
								onChange={(e) => setAbout(e.target.value)}
								className='w-full p-2 border rounded'
								rows='4'
							/>
							<button
								onClick={handleSave}
								className='mt-2 bg-primary text-white py-2 px-4 rounded hover:bg-primary-dark 
								transition duration-300'
							>
								Guardar
							</button>
						</>
					) : (
						<>
							<p>{userData.about}</p>
							<button
								onClick={() => setIsEditing(true)}
								className='mt-2 text-primary hover:text-primary-dark transition duration-300'
							>
								Editar
							</button>
						</>
					)}
				</>
			)}
		</div>
	);
};
export default AboutSection;

================
File: frontend\src\components\CompanyInfoSection.jsx
================
// frontend/src/components/CompanyInfoSection.jsx

import { useState } from "react";
import { Globe, Calendar } from "lucide-react";

// Export this form for reuse in the questionnaire modal
export const CompanyInfoForm = ({ companyInfo, setCompanyInfo, hasWebsite, setHasWebsite }) => {
    return (
        <form className="space-y-4">
            <div>
                <label className="block text-sm font-medium text-gray-700">Nombre de la Empresa</label>
                <input
                    type="text"
                    value={companyInfo.companyName || ''}
                    onChange={(e) => setCompanyInfo({...companyInfo, companyName: e.target.value})}
                    className="mt-1 p-2 w-full border rounded-md"
                />
            </div>
            
            <div>
                <label className="block text-sm font-medium text-gray-700">Industria</label>
                <input
                    type="text"
                    value={companyInfo.industry || ''}
                    onChange={(e) => setCompanyInfo({...companyInfo, industry: e.target.value})}
                    className="mt-1 p-2 w-full border rounded-md"
                />
            </div>
            
            <div>
                <label className="block text-sm font-medium text-gray-700">A√±o de Fundaci√≥n</label>
                <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <Calendar className="h-5 w-5 text-gray-400" />
                    </div>
                    <input
                        type="number"
                        min="1900"
                        max={new Date().getFullYear()}
                        value={companyInfo.foundedYear || ''}
                        onChange={(e) => setCompanyInfo({...companyInfo, foundedYear: e.target.value})}
                        className="mt-1 p-2 pl-10 w-full border rounded-md"
                        placeholder={new Date().getFullYear()}
                    />
                </div>
            </div>
            
            <div>
                <div className="flex items-center justify-between mb-2">
                    <label className="block text-sm font-medium text-gray-700">Sitio Web</label>
                    <div className="flex items-center">
                        <span className="text-sm text-gray-500 mr-2">
                            {hasWebsite ? "Activado" : "Desactivado"}
                        </span>
                        <label className="relative inline-flex items-center cursor-pointer">
                            <input 
                                type="checkbox" 
                                checked={hasWebsite}
                                onChange={(e) => setHasWebsite(e.target.checked)}
                                className="sr-only peer" 
                            />
                            <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                        </label>
                    </div>
                </div>
                {hasWebsite && (
                    <div className="relative">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <Globe className="h-5 w-5 text-gray-400" />
                        </div>
                        <input
                            type="url"
                            value={companyInfo.website || ''}
                            onChange={(e) => setCompanyInfo({...companyInfo, website: e.target.value})}
                            className="mt-1 p-2 pl-10 w-full border rounded-md"
                            placeholder="https://"
                        />
                    </div>
                )}
            </div>
            
            <div>
                <label className="block text-sm font-medium text-gray-700">Cantidad de Empleados</label>
                <select
                    value={companyInfo.employees || ''}
                    onChange={(e) => setCompanyInfo({...companyInfo, employees: e.target.value})}
                    className="mt-1 p-2 w-full border rounded-md"
                >
                    <option value="">Seleccionar</option>
                    <option value="1-10">1-10 empleados</option>
                    <option value="11-50">11-50 empleados</option>
                    <option value="51-200">51-200 empleados</option>
                    <option value="201-500">201-500 empleados</option>
                    <option value="501+">501+ empleados</option>
                </select>
            </div>
            
            <div>
                <label className="block text-sm font-medium text-gray-700">Descripci√≥n</label>
                <textarea
                    value={companyInfo.description || ''}
                    onChange={(e) => setCompanyInfo({...companyInfo, description: e.target.value})}
                    rows="4"
                    className="mt-1 p-2 w-full border rounded-md"
                ></textarea>
            </div>
            
            <div>
                <label className="block text-sm font-medium text-gray-700">Ubicaci√≥n</label>
                <input
                    type="text"
                    value={companyInfo.location || ''}
                    onChange={(e) => setCompanyInfo({...companyInfo, location: e.target.value})}
                    className="mt-1 p-2 w-full border rounded-md"
                />
            </div>
            
            <div>
                <label className="block text-sm font-medium text-gray-700">Email de Contacto</label>
                <input
                    type="email"
                    value={companyInfo.contactEmail || ''}
                    onChange={(e) => setCompanyInfo({...companyInfo, contactEmail: e.target.value})}
                    className="mt-1 p-2 w-full border rounded-md"
                />
            </div>
            
            <div>
                <label className="block text-sm font-medium text-gray-700">Tel√©fono de Contacto</label>
                <input
                    type="tel"
                    value={companyInfo.contactPhone || ''}
                    onChange={(e) => setCompanyInfo({...companyInfo, contactPhone: e.target.value})}
                    className="mt-1 p-2 w-full border rounded-md"
                />
            </div>
        </form>
    );
};

const CompanyInfoSection = ({ userData, isOwnProfile, onSave }) => {
    const [isEditing, setIsEditing] = useState(false);
    const [companyInfo, setCompanyInfo] = useState(userData.companyInfo || {});
    const [hasWebsite, setHasWebsite] = useState(!!companyInfo.website);

    const handleSave = () => {
        // If they turned off the website switch, remove the website field
        const dataToSave = { ...companyInfo };
        if (!hasWebsite) {
            dataToSave.website = "";
        }
        
        console.log("CompanyInfoSection - Saving data:", dataToSave);
        onSave({ companyInfo: dataToSave });
        setIsEditing(false);
    };

    // Only render for empresario role
    if (userData.role !== 'empresario') return null;

    return (
        <div className='bg-white shadow rounded-lg p-6 mb-6'>
            <h2 className='text-xl font-semibold mb-4'>Informaci√≥n de la Empresa</h2>
            
            {isEditing ? (
                <>
                    <CompanyInfoForm 
                        companyInfo={companyInfo}
                        setCompanyInfo={setCompanyInfo}
                        hasWebsite={hasWebsite}
                        setHasWebsite={setHasWebsite}
                    />
                    
                    <button
                        type="button"
                        onClick={handleSave}
                        className="mt-4 bg-primary text-white py-2 px-4 rounded hover:bg-primary-dark transition duration-300"
                    >
                        Guardar Informaci√≥n
                    </button>
                </>
            ) : (
                <div className="space-y-4">
                    {companyInfo && companyInfo.companyName ? (
                        <>
                            <div>
                                <h3 className="font-semibold">Nombre:</h3>
                                <p>{companyInfo.companyName}</p>
                            </div>
                            
                            {companyInfo.industry && (
                                <div>
                                    <h3 className="font-semibold">Industria:</h3>
                                    <p>{companyInfo.industry}</p>
                                </div>
                            )}
                            
                            {companyInfo.foundedYear && (
                                <div>
                                    <h3 className="font-semibold">Fundada en:</h3>
                                    <p>{companyInfo.foundedYear}</p>
                                </div>
                            )}
                            
                            {companyInfo.website && (
                                <div>
                                    <h3 className="font-semibold">Sitio Web:</h3>
                                    <div className="flex items-center">
                                        <Globe size={16} className="mr-2 text-primary" />
                                        <a 
                                            href={companyInfo.website.startsWith('http') ? companyInfo.website : `https://${companyInfo.website}`} 
                                            target="_blank" 
                                            rel="noopener noreferrer" 
                                            className="text-primary hover:underline"
                                        >
                                            {companyInfo.website}
                                        </a>
                                    </div>
                                </div>
                            )}
                            
                            {companyInfo.employees && (
                                <div>
                                    <h3 className="font-semibold">Tama√±o:</h3>
                                    <p>{companyInfo.employees} empleados</p>
                                </div>
                            )}
                            
                            {companyInfo.description && (
                                <div>
                                    <h3 className="font-semibold">Acerca de la empresa:</h3>
                                    <p>{companyInfo.description}</p>
                                </div>
                            )}
                            
                            {companyInfo.location && (
                                <div>
                                    <h3 className="font-semibold">Ubicaci√≥n:</h3>
                                    <p>{companyInfo.location}</p>
                                </div>
                            )}
                            
                            {companyInfo.contactEmail && (
                                <div>
                                    <h3 className="font-semibold">Email de contacto:</h3>
                                    <p>{companyInfo.contactEmail}</p>
                                </div>
                            )}
                            
                            {companyInfo.contactPhone && (
                                <div>
                                    <h3 className="font-semibold">Tel√©fono de contacto:</h3>
                                    <p>{companyInfo.contactPhone}</p>
                                </div>
                            )}
                        </>
                    ) : (
                        <p className="text-gray-500">No hay informaci√≥n de la empresa disponible.</p>
                    )}
                    
                    {isOwnProfile && (
                        <button
                            onClick={() => setIsEditing(true)}
                            className="mt-4 text-primary hover:text-primary-dark transition duration-300"
                        >
                            Editar informaci√≥n de la empresa
                        </button>
                    )}
                </div>
            )}
        </div>
    );
};

export default CompanyInfoSection;

================
File: frontend\src\components\CompanyQuestionnaire.jsx
================
// frontend/src/components/CompanyQuestionnaire.jsx
import React, { useState } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { axiosInstance } from '../lib/axios';
import { CompanyInfoForm } from './CompanyInfoSection';
import toast from 'react-hot-toast';
import { ArrowRight, ArrowLeft, CheckCircle } from 'lucide-react';

// This component handles the multi-step questionnaire logic and can be used
// either directly or within another component like QuestionnaireModal
const CompanyQuestionnaire = ({ 
  initialData = {}, 
  onComplete, 
  onCancel,
  showSkip = true,
  containerClassName = "" 
}) => {
  const queryClient = useQueryClient();
  const [step, setStep] = useState(1);
  const [companyInfo, setCompanyInfo] = useState(initialData || {});
  const [hasWebsite, setHasWebsite] = useState(!!initialData?.website);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Check if required fields for the current step are filled
  const canProceed = () => {
    if (step === 1) {
      return !!companyInfo.companyName;
    }
    return true;
  };

  // Mutation to save company info and mark first login as completed
  const { mutate: completeSetup } = useMutation({
    mutationFn: async () => {
      // If website toggle is off, remove website field
      const dataToSubmit = { ...companyInfo };
      if (!hasWebsite) {
        dataToSubmit.website = "";
      }
      
      return axiosInstance.put('/users/complete-first-login', {
        companyInfo: dataToSubmit
      });
    },
    onSuccess: (response) => {
      toast.success('¬°Informaci√≥n de la empresa guardada exitosamente!');
      
      // Update user data in the cache
      queryClient.invalidateQueries(['authUser']);
      
      // Reset state and call completion handler
      setIsSubmitting(false);
      if (onComplete) {
        onComplete(response.data);
      }
    },
    onError: (error) => {
      toast.error(error.response?.data?.message || 'Error al guardar la informaci√≥n');
      setIsSubmitting(false);
    }
  });

  const handleSubmit = () => {
    setIsSubmitting(true);
    completeSetup();
  };

  const handleSkip = () => {
    if (window.confirm('¬øEst√°s seguro de que deseas omitir el cuestionario? La informaci√≥n de tu empresa no estar√° completa.')) {
      setIsSubmitting(true);
      completeSetup();
    }
  };

  return (
    <div className={containerClassName}>
      {/* Progress indicator */}
      <div className="mb-6 flex justify-between items-center">
        <div className="flex items-center">
          <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
            step >= 1 ? 'bg-primary text-white' : 'bg-gray-200'
          }`}>
            1
          </div>
          <div className={`h-1 w-12 ${step >= 2 ? 'bg-primary' : 'bg-gray-200'}`}></div>
          <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
            step >= 2 ? 'bg-primary text-white' : 'bg-gray-200'
          }`}>
            2
          </div>
        </div>
        <div>
          Paso {step} de 2
        </div>
      </div>
      
      {/* Step content */}
      {step === 1 && (
        <div>
          <h3 className="text-lg font-semibold mb-4">Informaci√≥n B√°sica de la Empresa</h3>
          <p className="text-gray-600 mb-4">
            Como usuario empresario, necesitamos algunos detalles sobre su negocio para mostrar en su perfil.
            Esta informaci√≥n ayudar√° a los egresados a conocer mejor su empresa.
          </p>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Nombre de la Empresa *</label>
              <input
                type="text"
                value={companyInfo.companyName || ''}
                onChange={(e) => setCompanyInfo({...companyInfo, companyName: e.target.value})}
                className="mt-1 p-2 w-full border rounded-md"
                required
              />
              <p className="text-xs text-gray-500 mt-1">Campo obligatorio</p>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Industria</label>
              <input
                type="text"
                value={companyInfo.industry || ''}
                onChange={(e) => setCompanyInfo({...companyInfo, industry: e.target.value})}
                className="mt-1 p-2 w-full border rounded-md"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Ubicaci√≥n</label>
              <input
                type="text"
                value={companyInfo.location || ''}
                onChange={(e) => setCompanyInfo({...companyInfo, location: e.target.value})}
                className="mt-1 p-2 w-full border rounded-md"
              />
            </div>
          </div>
        </div>
      )}
      
      {step === 2 && (
        <div>
          <h3 className="text-lg font-semibold mb-4">Detalles Adicionales</h3>
          <p className="text-gray-600 mb-4">
            Proporcione informaci√≥n adicional que ayude a presentar mejor su empresa a los egresados.
          </p>
          
          {/* Reuse the company info form for the rest of the fields */}
          <CompanyInfoForm 
            companyInfo={companyInfo}
            setCompanyInfo={setCompanyInfo}
            hasWebsite={hasWebsite}
            setHasWebsite={setHasWebsite}
          />
        </div>
      )}
      
      {/* Action buttons */}
      <div className="mt-6 pt-4 border-t flex justify-between items-center">
        {step === 1 ? (
          <button
            onClick={showSkip ? handleSkip : onCancel}
            className="text-gray-500 hover:text-gray-700"
            disabled={isSubmitting}
          >
            {showSkip ? "Omitir por ahora" : "Cancelar"}
          </button>
        ) : (
          <button
            onClick={() => setStep(step - 1)}
            className="flex items-center text-gray-700 hover:text-gray-900"
            disabled={isSubmitting}
          >
            <ArrowLeft size={16} className="mr-1" />
            Anterior
          </button>
        )}
        
        {step < 2 ? (
          <button
            onClick={() => setStep(step + 1)}
            disabled={!canProceed() || isSubmitting}
            className={`flex items-center bg-primary text-white px-4 py-2 rounded-md ${
              !canProceed() ? 'opacity-50 cursor-not-allowed' : 'hover:bg-primary-dark'
            }`}
          >
            Siguiente
            <ArrowRight size={16} className="ml-1" />
          </button>
        ) : (
          <button
            onClick={handleSubmit}
            disabled={isSubmitting}
            className="flex items-center bg-primary text-white px-4 py-2 rounded-md hover:bg-primary-dark"
          >
            {isSubmitting ? (
              <>
                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Guardando...
              </>
            ) : (
              <>
                <CheckCircle size={16} className="mr-1" />
                Completar Configuraci√≥n
              </>
            )}
          </button>
        )}
      </div>
    </div>
  );
};

export default CompanyQuestionnaire;

================
File: frontend\src\components\EducationSection.jsx
================
import { School, X } from "lucide-react";
import { useState } from "react";

const EducationSection = ({ userData, isOwnProfile, onSave }) => {
	const [isEditing, setIsEditing] = useState(false);
	const [educations, setEducations] = useState(userData.education || []);
	const [newEducation, setNewEducation] = useState({
		school: "",
		fieldOfStudy: "",
		startYear: "",
		endYear: "",
	});

	const handleAddEducation = () => {
		if (newEducation.school && newEducation.fieldOfStudy && newEducation.startYear) {
			setEducations([...educations, newEducation]);
			setNewEducation({
				school: "",
				fieldOfStudy: "",
				startYear: "",
				endYear: "",
			});
		}
	};

	const handleDeleteEducation = (id) => {
		setEducations(educations.filter((edu) => edu._id !== id));
	};

	const handleSave = () => {
		onSave({ education: educations });
		setIsEditing(false);
	};

	return (
		<div className='bg-white shadow rounded-lg p-6 mb-6'>
			<h2 className='text-xl font-semibold mb-4'>Educaci√≥n</h2>
			{educations.map((edu) => (
				<div key={edu._id} className='mb-4 flex justify-between items-start'>
					<div className='flex items-start'>
						<School size={20} className='mr-2 mt-1' />
						<div>
							<h3 className='font-semibold'>{edu.fieldOfStudy}</h3>
							<p className='text-gray-600'>{edu.school}</p>
							<p className='text-gray-500 text-sm'>
								{edu.startYear} - {edu.endYear || "Present"}
							</p>
						</div>
					</div>
					{isEditing && (
						<button onClick={() => handleDeleteEducation(edu._id)} className='text-red-500'>
							<X size={20} />
						</button>
					)}
				</div>
			))}
			{isEditing && (
				<div className='mt-4'>
					<input
						type='text'
						placeholder='Escuela'
						value={newEducation.school}
						onChange={(e) => setNewEducation({ ...newEducation, school: e.target.value })}
						className='w-full p-2 border rounded mb-2'
					/>
					<input
						type='text'
						placeholder='Especialidad'
						value={newEducation.fieldOfStudy}
						onChange={(e) => setNewEducation({ ...newEducation, fieldOfStudy: e.target.value })}
						className='w-full p-2 border rounded mb-2'
					/>
					<input
						type='number'
						placeholder='A√±o de ingreso.'
						value={newEducation.startYear}
						onChange={(e) => setNewEducation({ ...newEducation, startYear: e.target.value })}
						className='w-full p-2 border rounded mb-2'
					/>
					<input
						type='number'
						placeholder='Fin del a√±o.'
						value={newEducation.endYear}
						onChange={(e) => setNewEducation({ ...newEducation, endYear: e.target.value })}
						className='w-full p-2 border rounded mb-2'
					/>
					<button
						onClick={handleAddEducation}
						className='bg-primary text-white py-2 px-4 rounded hover:bg-primary-dark transition duration-300'
					>
						A√±adir educaci√≥n
					</button>
				</div>
			)}

			{isOwnProfile && (
				<>
					{isEditing ? (
						<button
							onClick={handleSave}
							className='mt-4 bg-primary text-white py-2 px-4 rounded hover:bg-primary-dark
							 transition duration-300'
						>
							Guardar cambios
						</button>
					) : (
						<button
							onClick={() => setIsEditing(true)}
							className='mt-4 text-primary hover:text-primary-dark transition duration-300'
						>
							Editar educaci√≥n
						</button>
					)}
				</>
			)}
		</div>
	);
};
export default EducationSection;

================
File: frontend\src\components\ExperienceSection.jsx
================
import { Briefcase, X } from "lucide-react";
import { useState } from "react";
import { formatDate } from "../utils/dateUtils";

const ExperienceSection = ({ userData, isOwnProfile, onSave }) => {
	const [isEditing, setIsEditing] = useState(false);
	const [experiences, setExperiences] = useState(userData.experience || []);
	const [newExperience, setNewExperience] = useState({
		title: "",
		company: "",
		startDate: "",
		endDate: "",
		description: "",
		currentlyWorking: false,
	});

	const handleAddExperience = () => {
		if (newExperience.title && newExperience.company && newExperience.startDate) {
			setExperiences([...experiences, newExperience]);

			setNewExperience({
				title: "",
				company: "",
				startDate: "",
				endDate: "",
				description: "",
				currentlyWorking: false,
			});
		}
	};

	const handleDeleteExperience = (id) => {
		setExperiences(experiences.filter((exp) => exp._id !== id));
	};

	const handleSave = () => {
		onSave({ experience: experiences });
		setIsEditing(false);
	};

	const handleCurrentlyWorkingChange = (e) => {
		setNewExperience({
			...newExperience,
			currentlyWorking: e.target.checked,
			endDate: e.target.checked ? "" : newExperience.endDate,
		});
	};

	return (
		<div className='bg-white shadow rounded-lg p-6 mb-6'>
			<h2 className='text-xl font-semibold mb-4'>Experiencia</h2>
			{experiences.map((exp) => (
				<div key={exp._id} className='mb-4 flex justify-between items-start'>
					<div className='flex items-start'>
						<Briefcase size={20} className='mr-2 mt-1' />
						<div>
							<h3 className='font-semibold'>{exp.title}</h3>
							<p className='text-gray-600'>{exp.company}</p>
							<p className='text-gray-500 text-sm'>
								{formatDate(exp.startDate)} - {exp.endDate ? formatDate(exp.endDate) : "presente"}
							</p>
							<p className='text-gray-700'>{exp.description}</p>
						</div>
					</div>
					{isEditing && (
						<button onClick={() => handleDeleteExperience(exp._id)} className='text-red-500'>
							<X size={20} />
						</button>
					)}
				</div>
			))}

			{isEditing && (
				<div className='mt-4'>
					<input
						type='text'
						placeholder='Titulo'
						value={newExperience.title}
						onChange={(e) => setNewExperience({ ...newExperience, title: e.target.value })}
						className='w-full p-2 border rounded mb-2'
					/>
					<input
						type='text'
						placeholder='Compa√±ia'
						value={newExperience.company}
						onChange={(e) => setNewExperience({ ...newExperience, company: e.target.value })}
						className='w-full p-2 border rounded mb-2'
					/>
					<input
						type='date'
						placeholder='Fecha de inicio'
						value={newExperience.startDate}
						onChange={(e) => setNewExperience({ ...newExperience, startDate: e.target.value })}
						className='w-full p-2 border rounded mb-2'
					/>
					<div className='flex items-center mb-2'>
						<input
							type='checkbox'
							id='currentlyWorking'
							checked={newExperience.currentlyWorking}
							onChange={handleCurrentlyWorkingChange}
							className='mr-2'
						/>
						<label htmlFor='currentlyWorking'>Sigo trabajando aqu√≠</label>
					</div>
					{!newExperience.currentlyWorking && (
						<input
							type='date'
							placeholder='Fecha de terminaci√≥n'
							value={newExperience.endDate}
							onChange={(e) => setNewExperience({ ...newExperience, endDate: e.target.value })}
							className='w-full p-2 border rounded mb-2'
						/>
					)}
					<textarea
						placeholder='Descripci√≥n'
						value={newExperience.description}
						onChange={(e) => setNewExperience({ ...newExperience, description: e.target.value })}
						className='w-full p-2 border rounded mb-2'
					/>
					<button
						onClick={handleAddExperience}
						className='bg-primary text-white py-2 px-4 rounded hover:bg-primary-dark transition duration-300'
					>
						A√±adir experiencia
					</button>
				</div>
			)}

			{isOwnProfile && (
				<>
					{isEditing ? (
						<button
							onClick={handleSave}
							className='mt-4 bg-primary text-white py-2 px-4 rounded hover:bg-primary-dark transition duration-300'
						>
							Guardar cambios
						</button>
					) : (
						<button
							onClick={() => setIsEditing(true)}
							className='mt-4 text-primary hover:text-primary-dark transition duration-300'
						>
							Editar experiencias
						</button>
					)}
				</>
			)}
		</div>
	);
};
export default ExperienceSection;

================
File: frontend\src\components\FriendRequest.jsx
================
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { axiosInstance } from "../lib/axios";
import toast from "react-hot-toast";
import { Link } from "react-router-dom";

const FriendRequest = ({ request }) => {
	const queryClient = useQueryClient();

	const { mutate: acceptConnectionRequest } = useMutation({
		mutationFn: (requestId) => axiosInstance.put(`/connections/accept/${requestId}`),
		onSuccess: () => {
			toast.success("solicitud de conexi√≥n aceptada");
			queryClient.invalidateQueries({ queryKey: ["connectionRequests"] });
		},
		onError: (error) => {
			toast.error(error.response.data.error);
		},
	});

	const { mutate: rejectConnectionRequest } = useMutation({
		mutationFn: (requestId) => axiosInstance.put(`/connections/reject/${requestId}`),
		onSuccess: () => {
			toast.success("Solicitud de conexi√≥n rechazada");
			queryClient.invalidateQueries({ queryKey: ["connectionRequests"] });
		},
		onError: (error) => {
			toast.error(error.response.data.error);
		},
	});

	return (
		<div className='bg-white rounded-lg shadow p-4 flex items-center justify-between transition-all hover:shadow-md'>
			<div className='flex items-center gap-4'>
				<Link to={`/profile/${request.sender.username}`}>
					<img
						src={request.sender.profilePicture || "/avatar.png"}
						alt={request.name}
						className='w-16 h-16 rounded-full object-cover'
					/>
				</Link>

				<div>
					<Link to={`/profile/${request.sender.username}`} className='font-semibold text-lg'>
						{request.sender.name}
					</Link>
					<p className='text-gray-600'>{request.sender.headline}</p>
				</div>
			</div>

			<div className='space-x-2'>
				<button
					className='bg-primary text-white px-4 py-2 rounded-md hover:bg-primary-dark transition-colors'
					onClick={() => acceptConnectionRequest(request._id)}
				>
					Aceptar
				</button>
				<button
					className='bg-gray-200 text-gray-800 px-4 py-2 rounded-md hover:bg-gray-300 transition-colors'
					onClick={() => rejectConnectionRequest(request._id)}
				>
					Rechazar
				</button>
			</div>
		</div>
	);
};
export default FriendRequest;

================
File: frontend\src\components\Post.jsx
================
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { useState } from "react";
import { axiosInstance } from "../lib/axios";
import toast from "react-hot-toast";
import { Link, useParams } from "react-router-dom";
import { Loader, MessageCircle, Send, Share2, ThumbsUp, Trash2, SquareChevronUp, } from "lucide-react";
import { formatDistanceToNow } from "date-fns";

import PostAction from "./PostAction";

const Post = ({ post }) => {
	const { postId } = useParams();

	const { data: authUser } = useQuery({ queryKey: ["authUser"] });
	const [showComments, setShowComments] = useState(false);
	const [newComment, setNewComment] = useState("");
	const [comments, setComments] = useState(post.comments || []);
	const isOwner = authUser._id === post.author._id;
	const isLiked = post.likes.includes(authUser._id);

	const queryClient = useQueryClient();

	const { mutate: deletePost, isPending: isDeletingPost } = useMutation({
		mutationFn: async () => {
			await axiosInstance.delete(`/posts/delete/${post._id}`);
		},
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ["posts"] });
			toast.success("Post borrado");
		},
		onError: (error) => {
			toast.error(error.message);
		},
	});

	const { mutate: createComment, isPending: isAddingComment } = useMutation({
		mutationFn: async (newComment) => {
			await axiosInstance.post(`/posts/${post._id}/comment`, { content: newComment });
		},
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ["posts"] });
			toast.success("Comentario a√±adido");
		},
		onError: (err) => {
			toast.error(err.response.data.message || "Fallo al a√±adir el comentario");
		},
	});

	const { mutate: likePost, isPending: isLikingPost } = useMutation({
		mutationFn: async () => {
			await axiosInstance.post(`/posts/${post._id}/like`);
		},
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ["posts"] });
			queryClient.invalidateQueries({ queryKey: ["post", postId] });
		},
	});

	const handleDeletePost = () => {
		if (!window.confirm("¬øEstas seguro de que quieres borrar este post?")) return;
		deletePost();
	};

	const handleLikePost = async () => {
		if (isLikingPost) return;
		likePost();
	};

	const handleAddComment = async (e) => {
		e.preventDefault();
		if (newComment.trim()) {
			createComment(newComment);
			setNewComment("");
			setComments([
				...comments,
				{
					content: newComment,
					user: {
						_id: authUser._id,
						name: authUser.name,
						profilePicture: authUser.profilePicture,
					},
					createdAt: new Date(),
				},
			]);
		}
	};

	return (
		<div className='bg-secondary rounded-lg shadow mb-4'>
			<div className='p-4'>
				<div className='flex items-center justify-between mb-4'>
					<div className='flex items-center'>
						<Link to={`/profile/${post?.author?.username}`}>
							<img
								src={post.author.profilePicture || "/avatar.png"}
								alt={post.author.name}
								className='size-10 rounded-full mr-3'
							/>
						</Link>

						<div>
							<Link to={`/profile/${post?.author?.username}`}>
								<h3 className='font-semibold'>{post.author.name}</h3>
							</Link>
							<p className='text-xs text-info'>{post.author.headline}</p>
							<p className='text-xs text-info'>
								{formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}
							</p>
						</div>
					</div>
					{isOwner && (
						<button onClick={handleDeletePost} className='text-red-500 hover:text-red-700'>
							{isDeletingPost ? <Loader size={18} className='animate-spin' /> : <Trash2 size={18} />}
						</button>
					)}
				</div>
				<p className='mb-4'>{post.content}</p>
				{post.image && <img src={post.image} alt='Post content' className='rounded-lg w-full mb-4' />}

				<div className='flex justify-between text-info'>
					<PostAction
						icon={<SquareChevronUp size={18} className={isLiked ? "text-blue-500  fill-blue-300" : ""} />}
						text={`Votos positivos (${post.likes.length})`}
						onClick={handleLikePost}
					/>
					<PostAction
						icon={<MessageCircle size={18} />}
						text={`Comentarios (${comments.length})`}
						onClick={() => setShowComments(!showComments)}
					/>
					{/*<PostAction icon={<Share2 size={18} />} text='compartir' /> */}
				</div>
			</div>

			{showComments && (
				<div className='px-4 pb-4'>
					<div className='mb-4 max-h-60 overflow-y-auto'>
						{comments.map((comment) => (
							<div key={comment._id} className='mb-2 bg-base-100 p-2 rounded flex items-start'>
								<img
									src={comment.user.profilePicture || "/avatar.png"}
									alt={comment.user.name}
									className='w-8 h-8 rounded-full mr-2 flex-shrink-0'
								/>
								<div className='flex-grow'>
									<div className='flex items-center mb-1'>
										<span className='font-semibold mr-2'>{comment.user.name}</span>
										<span className='text-xs text-info'>
											{formatDistanceToNow(new Date(comment.createdAt))}
										</span>
									</div>
									<p>{comment.content}</p>
								</div>
							</div>
						))}
					</div>

					<form onSubmit={handleAddComment} className='flex items-center'>
						<input
							type='text'
							value={newComment}
							onChange={(e) => setNewComment(e.target.value)}
							placeholder='Add a comment...'
							className='flex-grow p-2 rounded-l-full bg-base-100 focus:outline-none focus:ring-2 focus:ring-primary'
						/>

						<button
							type='submit'
							className='bg-primary text-white p-2 rounded-r-full hover:bg-primary-dark transition duration-300'
							disabled={isAddingComment}
						>
							{isAddingComment ? <Loader size={18} className='animate-spin' /> : <Send size={18} />}
						</button>
					</form>
				</div>
			)}
		</div>
	);
};
export default Post;

================
File: frontend\src\components\PostAction.jsx
================
export default function PostAction({ icon, text, onClick }) {
	return (
		<button className='flex items-center' onClick={onClick}>
			<span className='mr-1'>{icon}</span>
			<span className='hidden sm:inline'>{text}</span>
		</button>
	);
}

================
File: frontend\src\components\PostCreation.jsx
================
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useState } from "react";
import { axiosInstance } from "../lib/axios";
import toast from "react-hot-toast";
import { Image, Loader } from "lucide-react";

const PostCreation = ({ user }) => {
	const [content, setContent] = useState("");
	const [image, setImage] = useState(null);
	const [imagePreview, setImagePreview] = useState(null);

	const queryClient = useQueryClient();

	const { mutate: createPostMutation, isPending } = useMutation({
		mutationFn: async (postData) => {
			const res = await axiosInstance.post("/posts/create", postData, {
				headers: { "Content-Type": "application/json" },
			});
			return res.data;
		},
		onSuccess: () => {
			resetForm();
			toast.success("Post creado");
			queryClient.invalidateQueries({ queryKey: ["posts"] });
		},
		onError: (err) => {
			toast.error(err.response.data.message || "Failed to create post");
		},
	});

	const handlePostCreation = async () => {
		try {
			const postData = { content };
			if (image) postData.image = await readFileAsDataURL(image);

			createPostMutation(postData);
		} catch (error) {
			console.error("Error in handlePostCreation:", error);
		}
	};

	const resetForm = () => {
		setContent("");
		setImage(null);
		setImagePreview(null);
	};

	const handleImageChange = (e) => {
		const file = e.target.files[0];
		setImage(file);
		if (file) {
			readFileAsDataURL(file).then(setImagePreview);
		} else {
			setImagePreview(null);
		}
	};

	const readFileAsDataURL = (file) => {
		return new Promise((resolve, reject) => {
			const reader = new FileReader();
			reader.onloadend = () => resolve(reader.result);
			reader.onerror = reject;
			reader.readAsDataURL(file);
		});
	};

	return (
		<div className='bg-secondary rounded-lg shadow mb-4 p-4'>
			<div className='flex space-x-3'>
				<img src={user.profilePicture || "/avatar.png"} alt={user.name} className='size-12 rounded-full' />
				<textarea
					placeholder="Escribe tu post aqu√É¬≠."
					className='w-full p-3 rounded-lg bg-base-100 hover:bg-base-200 focus:bg-base-200 focus:outline-none resize-none transition-colors duration-200 min-h-[100px]'
					value={content}
					onChange={(e) => setContent(e.target.value)}
				/>
			</div>

			{imagePreview && (
				<div className='mt-4'>
					<img src={imagePreview} alt='Selected' className='w-full h-auto rounded-lg' />
				</div>
			)}

			<div className='flex justify-between items-center mt-4'>
				<div className='flex space-x-4'>
					<label className='flex items-center text-info hover:text-info-dark transition-colors duration-200 cursor-pointer'>
						<Image size={20} className='mr-2' />
						<span>Aregar imagen</span>
						<input type='file' accept='image/*' className='hidden' onChange={handleImageChange} />
					</label>
				</div>

				<button
					className='bg-primary text-white rounded-lg px-4 py-2 hover:bg-primary-dark transition-colors duration-200'
					onClick={handlePostCreation}
					disabled={isPending}
				>
					{isPending ? <Loader className='size-5 animate-spin' /> : "Publicar"}
				</button>
			</div>
		</div>
	);
};


export default PostCreation;

================
File: frontend\src\components\PostPefil.jsx
================
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useState } from "react";
import { axiosInstance } from "../lib/axios";
import toast from "react-hot-toast";
import { Image, Loader } from "lucide-react";

const PostPerfil = ({ user }) => {
	const [content, setContent] = useState("");
	const [image, setImage] = useState(null);
	const [imagePreview, setImagePreview] = useState(null);

	const queryClient = useQueryClient();

	const { mutate: createPostMutation, isPending } = useMutation({
		mutationFn: async (postData) => {
			const res = await axiosInstance.post("/posts/create", postData, {
				headers: { "Content-Type": "application/json" },
			});
			return res.data;
		},
		onSuccess: () => {
			resetForm();
			toast.success("Post creado");
			queryClient.invalidateQueries({ queryKey: ["posts"] });
		},
		onError: (err) => {
			toast.error(err.response.data.message || "Error al crear el post");
		},
	});

	const handlePostCreation = async () => {
		try {
			const postData = { content };
			if (image) postData.image = await readFileAsDataURL(image);

			createPostMutation(postData);
		} catch (error) {
			console.error("Error in handlePostCreation:", error);
		}
	};

	const resetForm = () => {
		setContent("");
		setImage(null);
		setImagePreview(null);
	};

	const handleImageChange = (e) => {
		const file = e.target.files[0];
		setImage(file);
		if (file) {
			readFileAsDataURL(file).then(setImagePreview);
		} else {
			setImagePreview(null);
		}
	};

	const readFileAsDataURL = (file) => {
		return new Promise((resolve, reject) => {
			const reader = new FileReader();
			reader.onloadend = () => resolve(reader.result);
			reader.onerror = reject;
			reader.readAsDataURL(file);
		});
	};

	return (
		<div className='bg-secondary rounded-lg shadow mb-4 p-4'>
			<div className='flex space-x-3'>
				<img src={user.profilePicture || "/avatar.png"} alt={user.name} className='size-12 rounded-full' />
				<textarea
					placeholder="Escribe tu post aqu√É¬≠."
					className='w-full p-3 rounded-lg bg-base-100 hover:bg-base-200 focus:bg-base-200 focus:outline-none resize-none transition-colors duration-200 min-h-[100px]'
					value={content}
					onChange={(e) => setContent(e.target.value)}
				/>
			</div>

			{imagePreview && (
				<div className='mt-4'>
					<img src={imagePreview} alt='Selected' className='w-full h-auto rounded-lg' />
				</div>
			)}

			<div className='flex justify-between items-center mt-4'>
				<div className='flex space-x-4'>
					<label className='flex items-center text-info hover:text-info-dark transition-colors duration-200 cursor-pointer'>
						<Image size={20} className='mr-2' />
						<span>Aregar imagen</span>
						<input type='file' accept='image/*' className='hidden' onChange={handleImageChange} />
					</label>
				</div>

				<button
					className='bg-primary text-white rounded-lg px-4 py-2 hover:bg-primary-dark transition-colors duration-200'
					onClick={handlePostCreation}
					disabled={isPending}
				>
					{isPending ? <Loader className='size-5 animate-spin' /> : "Publicar"}
				</button>
			</div>
		</div>
	);
};


export default PostPerfil;

================
File: frontend\src\components\PostPerfil.jsx
================
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { useState } from "react";
import { axiosInstance } from "../lib/axios";
import toast from "react-hot-toast";
import { Link, useParams } from "react-router-dom";
import { Loader, MessageCircle, Send, Share2, ThumbsUp, Trash2, SquareChevronUp, } from "lucide-react";
import { formatDistanceToNow } from "date-fns";

import PostAction from "./PostAction";

const Post = ({ post }) => {
	const { postId } = useParams();

	const { data: authUser } = useQuery({ queryKey: ["authUser"] });
	const [showComments, setShowComments] = useState(false);
	const [newComment, setNewComment] = useState("");
	const [comments, setComments] = useState(post.comments || []);
	const isOwner = authUser._id === post.author._id;
	const isLiked = post.likes.includes(authUser._id);

	const queryClient = useQueryClient();

	const { mutate: deletePost, isPending: isDeletingPost } = useMutation({
		mutationFn: async () => {
			await axiosInstance.delete(`/posts/delete/${post._id}`);
		},
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ["posts"] });
			toast.success("Post borrado");
		},
		onError: (error) => {
			toast.error(error.message);
		},
	});

	const handleDeletePost = () => {
		if (!window.confirm("√Ç¬øEstas seguro de que quieres borrar este post?")) return;
		deletePost();
	};

	return (
		<div className='bg-secondary rounded-lg shadow mb-4'>
			<div className='p-4'>
				<div className='flex items-center justify-between mb-4'>
					<div className='flex items-center'>
						<Link to={`/profile/${post?.author?.username}`}>
							<img
								src={post.author.profilePicture || "/avatar.png"}
								alt={post.author.name}
								className='size-10 rounded-full mr-3'
							/>
						</Link>

						<div>
							<Link to={`/profile/${post?.author?.username}`}>
								<h3 className='font-semibold'>{post.author.name}</h3>
							</Link>
							<p className='text-xs text-info'>{post.author.headline}</p>
							<p className='text-xs text-info'>
								{formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}
							</p>
						</div>
					</div>
					{isOwner && (
						<button onClick={handleDeletePost} className='text-red-500 hover:text-red-700'>
							{isDeletingPost ? <Loader size={18} className='animate-spin' /> : <Trash2 size={18} />}
						</button>
					)}
				</div>
				<p className='mb-4'>{post.content}</p>
				{post.image && <img src={post.image} alt='Post content' className='rounded-lg w-full mb-4' />}

				<div className='flex justify-between text-info'>
					<PostAction
						icon={<SquareChevronUp size={18} className={isLiked ? "text-blue-500  fill-blue-300" : ""} />}
						text={`Votos positivos (${post.likes.length})`}
						onClick={handleLikePost}
					/>
					<PostAction
						icon={<MessageCircle size={18} />}
						text={`Comentarios (${comments.length})`}
						onClick={() => setShowComments(!showComments)}
					/>
					{/*<PostAction icon={<Share2 size={18} />} text='compartir' /> */}
				</div>
			</div>

			
		</div>
	);
};
export default Post;

================
File: frontend\src\components\ProfileHeader.jsx
================
// frontend/src/components/ProfileHeader.jsx
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { useMemo, useState } from "react";
import { axiosInstance } from "../lib/axios";
import { toast } from "react-hot-toast";
import { Camera, Clock, MapPin, UserCheck, UserPlus, X, FileText } from "lucide-react";

const ProfileHeader = ({ userData, onSave, isOwnProfile }) => {
 const [isEditing, setIsEditing] = useState(false);
 const [editedData, setEditedData] = useState({});
 const queryClient = useQueryClient();

 const { data: authUser } = useQuery({ queryKey: ["authUser"] });

 const { data: connectionStatus, refetch: refetchConnectionStatus } = useQuery({
   queryKey: ["connectionStatus", userData._id],
   queryFn: () => axiosInstance.get(`/connections/status/${userData._id}`),
   enabled: !isOwnProfile,
 });

 const isConnected = userData.connections.some((connection) => connection === authUser._id);

 const { mutate: sendConnectionRequest } = useMutation({
   mutationFn: (userId) => axiosInstance.post(`/connections/request/${userId}`),
   onSuccess: () => {
     toast.success("Connection request sent");
     refetchConnectionStatus();
     queryClient.invalidateQueries(["connectionRequests"]);
   },
   onError: (error) => {
     toast.error(error.response?.data?.message || "An error occurred");
   },
 });

 const { mutate: acceptRequest } = useMutation({
   mutationFn: (requestId) => axiosInstance.put(`/connections/accept/${requestId}`),
   onSuccess: () => {
     toast.success("Connection request accepted");
     refetchConnectionStatus();
     queryClient.invalidateQueries(["connectionRequests"]);
   },
   onError: (error) => {
     toast.error(error.response?.data?.message || "An error occurred");
   },
 });

 const { mutate: rejectRequest } = useMutation({
   mutationFn: (requestId) => axiosInstance.put(`/connections/reject/${requestId}`),
   onSuccess: () => {
     toast.success("Connection request rejected");
     refetchConnectionStatus();
     queryClient.invalidateQueries(["connectionRequests"]);
   },
   onError: (error) => {
     toast.error(error.response?.data?.message || "An error occurred");
   },
 });

 const { mutate: removeConnection } = useMutation({
   mutationFn: (userId) => axiosInstance.delete(`/connections/${userId}`),
   onSuccess: () => {
     toast.success("Connection removed");
     refetchConnectionStatus();
     queryClient.invalidateQueries(["connectionRequests"]);
   },
   onError: (error) => {
     toast.error(error.response?.data?.message || "An error occurred");
   },
 });

 const getConnectionStatus = useMemo(() => {
   if (isConnected) return "connected";
   if (!isConnected) return "not_connected";
   return connectionStatus?.data?.status;
 }, [isConnected, connectionStatus]);

 const renderConnectionButton = () => {
   const baseClass = "text-white py-2 px-4 rounded-full transition duration-300 flex items-center justify-center";
   switch (getConnectionStatus) {
     case "connected":
       return (
         <div className='flex gap-2 justify-center'>
           <div className={`${baseClass} bg-green-500 hover:bg-green-600`}>
             <UserCheck size={20} className='mr-2' />
             Conectado
           </div>
           <button
             className={`${baseClass} bg-red-500 hover:bg-red-600 text-sm`}
             onClick={() => removeConnection(userData._id)}
           >
             <X size={20} className='mr-2' />
             Cancelar conexi√≥n
           </button>
         </div>
       );

     case "pending":
       return (
         <button className={`${baseClass} bg-yellow-500 hover:bg-yellow-600`}>
           <Clock size={20} className='mr-2' />
           Pendiente
         </button>
       );

     case "received":
       return (
         <div className='flex gap-2 justify-center'>
           <button
             onClick={() => acceptRequest(connectionStatus.data.requestId)}
             className={`${baseClass} bg-green-500 hover:bg-green-600`}
           >
             Aceptar
           </button>
           <button
             onClick={() => rejectRequest(connectionStatus.data.requestId)}
             className={`${baseClass} bg-red-500 hover:bg-red-600`}
           >
             Rechazar
           </button>
         </div>
       );
     default:
       return (
         <button
           onClick={() => sendConnectionRequest(userData._id)}
           className='bg-primary hover:bg-primary-dark text-white py-2 px-4 rounded-full transition duration-300 flex items-center justify-center'
         >
           <UserPlus size={20} className='mr-2' />
           Conectar
         </button>
       );
   }
 };

 const handleFileChange = (event) => {
   const file = event.target.files[0];
   if (file) {
     const reader = new FileReader();
     reader.onloadend = () => {
       const fieldName = event.target.name;
       
       if (fieldName === 'curriculumImg' && file.type !== 'application/pdf') {
         toast.error('Por favor sube un archivo PDF');
         return;
       }
       
       setEditedData(prev => ({ ...prev, [fieldName]: reader.result }));
     };
     reader.readAsDataURL(file);
   }
 };

 const handleSave = () => {
   console.log('Saving data:', editedData);
   onSave(editedData);
   setIsEditing(false);
 };

 // Get role badge styling
 const getRoleBadgeClasses = () => {
   switch(userData.role) {
     case 'empresario':
       return 'bg-green-100 text-green-800';
     case 'administrador':
       return 'bg-purple-100 text-purple-800';
     default:
       return 'bg-blue-100 text-blue-800';
   }
 };

 // Get role display name
 const getRoleDisplayName = () => {
   switch(userData.role) {
     case 'empresario':
       return 'Empresario';
     case 'administrador':
       return 'Administrador';
     default:
       return 'Egresado';
   }
 };

 return (
   <div className="bg-white shadow rounded-lg mb-6">
     <div
       className="relative h-48 rounded-t-lg bg-cover bg-center"
       style={{
         backgroundImage: `url('${editedData.bannerImg || userData.bannerImg || "/banner.png"}')`,
       }}
     >
       {isEditing && (
         <label className="absolute top-2 right-2 bg-white p-2 rounded-full shadow cursor-pointer">
           <Camera size={20} />
           <input
             type="file"
             className="hidden"
             name="bannerImg"
             onChange={handleFileChange}
             accept="image/*"
           />
         </label>
       )}
     </div>

     <div className="p-4">
       <div className="relative -mt-20 mb-4">
         <div className="relative">
           <img
             className="w-32 h-32 rounded-full mx-auto object-cover"
             src={editedData.profilePicture || userData.profilePicture || "/avatar.png"}
             alt={userData.name}
           />
           {isEditing && (
             <label className="absolute bottom-0 right-1/2 transform translate-x-16 bg-white p-2 rounded-full shadow cursor-pointer">
               <Camera size={20} />
               <input
                 type="file"
                 className="hidden"
                 name="profilePicture"
                 onChange={handleFileChange}
                 accept="image/*"
               />
             </label>
           )}
         </div>
       </div>

       <div className="text-center mb-4">
         {isEditing ? (
           <input
             type="text"
             value={editedData.name ?? userData.name}
             onChange={(e) => setEditedData({ ...editedData, name: e.target.value })}
             className="text-2xl font-bold mb-2 text-center w-full"
           />
         ) : (
           <h1 className="text-2xl font-bold mb-2">{userData.name}</h1>
         )}

         {/* Role Badge */}
         <div className="mt-1 mb-2">
           <span className={`inline-block px-3 py-1 text-xs rounded-full ${getRoleBadgeClasses()}`}>
             {getRoleDisplayName()}
           </span>
         </div>

         {isEditing ? (
           <input
             type="text"
             value={editedData.headline ?? userData.headline}
             onChange={(e) => setEditedData({ ...editedData, headline: e.target.value })}
             className="text-gray-600 text-center w-full"
           />
         ) : (
           <p className="text-gray-600">
             {userData.role === 'empresario' && userData.companyInfo?.companyName
               ? `${userData.companyInfo.companyName} ¬∑ ${userData.headline}`
               : userData.headline}
           </p>
         )}

         <div className="flex justify-center items-center mt-2">
           <MapPin size={16} className="text-gray-500 mr-1" />
           {isEditing ? (
             <input
               type="text"
               value={editedData.location ?? userData.location}
               onChange={(e) => setEditedData({ ...editedData, location: e.target.value })}
               className="text-gray-600 text-center"
             />
           ) : (
             <span className="text-gray-600">{userData.location}</span>
           )}
         </div>
       </div>

       {isOwnProfile ? (
         isEditing ? (
           <button
             className="w-full bg-primary text-white py-2 px-4 rounded-full hover:bg-primary-dark transition duration-300"
             onClick={handleSave}
           >
             Guardar cambios
           </button>
         ) : (
           <button
             onClick={() => setIsEditing(true)}
             className="w-full bg-primary text-white py-2 px-4 rounded-full hover:bg-primary-dark transition duration-300"
           >
             Editar perfil
           </button>
         )
       ) : (
         <div className="flex justify-center">{renderConnectionButton()}</div>
       )}
     </div>

     <div className="p-4 border-t">
       <h2 className="text-xl font-semibold mb-4 text-center">Curriculum</h2>
       <div className="max-w-md mx-auto">
         <div className="relative w-full h-32 rounded-lg border-2 border-gray-200 flex items-center justify-center bg-gray-50">
           {(editedData.curriculumImg || userData.curriculumImg) ? (
             <div className="text-center">
               <FileText size={32} className="mx-auto mb-2 text-gray-600" />
               <a 
                 href={editedData.curriculumImg || userData.curriculumImg}
                 target="_blank" 
                 rel="noopener noreferrer"
                 className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-full inline-flex items-center gap-2 transition-colors duration-200"
               >
                 <span>Ver Curriculum</span>
                 <FileText size={16} />
               </a>
             </div>
           ) : (
             <div className="text-center text-gray-500">
               <FileText size={32} className="mx-auto mb-2" />
               <p className="text-sm">{isEditing ? "Haz clic para subir PDF" : "No hay curriculum"}</p>
             </div>
           )}
           
           {isEditing && (
             <label className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30 opacity-0 hover:opacity-100 transition-opacity duration-300 cursor-pointer rounded-lg">
               <div className="bg-white p-2 rounded-full shadow">
                 <FileText size={20} />
               </div>
               <input
                 type="file"
                 className="hidden"
                 name="curriculumImg"
                 onChange={handleFileChange}
                 accept="application/pdf"
               />
             </label>
           )}
         </div>
         {isEditing && (
           <p className="text-center text-xs text-gray-500 mt-1">
             Solo archivos PDF
           </p>
         )}
       </div>
     </div>
   </div>
 );
};

export default ProfileHeader;

================
File: frontend\src\components\ProjectCreation.jsx
================
// frontend/src/components/ProjectCreation.jsx
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useState } from "react";
import { axiosInstance } from "../lib/axios";
import toast from "react-hot-toast";
import { Calendar, Image, Loader } from "lucide-react";

const ProjectCreation = ({ user, onComplete }) => {
    const [projectData, setProjectData] = useState({
        title: "",
        content: "",
        image: null,
        projectRequirements: "",
        projectGoals: "",
        expirationDays: "30" // Default to 30 days
    });
    const [imagePreview, setImagePreview] = useState(null);

    const queryClient = useQueryClient();

    const { mutate: createProjectMutation, isPending } = useMutation({
        mutationFn: async (data) => {
            const res = await axiosInstance.post("/projects/create", data, {
                headers: { "Content-Type": "application/json" },
            });
            return res.data;
        },
        onSuccess: () => {
            resetForm();
            toast.success("Proyecto creado exitosamente");
            queryClient.invalidateQueries({ queryKey: ["projects"] });
            if (onComplete) onComplete();
        },
        onError: (err) => {
            toast.error(err.response?.data?.message || "Error al crear el proyecto");
        },
    });

    const handleProjectCreation = async () => {
        try {
            if (!projectData.title || !projectData.content) {
                return toast.error("El t√≠tulo y la descripci√≥n son obligatorios");
            }

            const data = { ...projectData };
            
            if (projectData.image) {
                data.image = await readFileAsDataURL(projectData.image);
            }

            createProjectMutation(data);
        } catch (error) {
            console.error("Error in handleProjectCreation:", error);
            toast.error("Error al crear el proyecto");
        }
    };

    const resetForm = () => {
        setProjectData({
            title: "",
            content: "",
            image: null,
            projectRequirements: "",
            projectGoals: "",
            expirationDays: "30"
        });
        setImagePreview(null);
    };

    const handleImageChange = (e) => {
        const file = e.target.files[0];
        setProjectData({ ...projectData, image: file });
        
        if (file) {
            readFileAsDataURL(file).then(setImagePreview);
        } else {
            setImagePreview(null);
        }
    };

    const readFileAsDataURL = (file) => {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onloadend = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(file);
        });
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setProjectData({ ...projectData, [name]: value });
    };

    return (
        <div className="bg-white rounded-lg shadow p-6 border-2 border-primary">
            <h2 className="text-xl font-bold mb-4">Crear Nuevo Proyecto</h2>
            
            <div className="mb-4">
                <label className="block text-sm font-medium mb-1">T√≠tulo del Proyecto*</label>
                <input
                    type="text"
                    name="title"
                    value={projectData.title}
                    onChange={handleInputChange}
                    placeholder="Escribe un t√≠tulo llamativo para tu proyecto"
                    className="w-full p-3 border rounded-lg"
                    required
                />
            </div>
            
            <div className="mb-4">
                <label className="block text-sm font-medium mb-1">Descripci√≥n*</label>
                <textarea
                    name="content"
                    value={projectData.content}
                    onChange={handleInputChange}
                    placeholder="Describe tu proyecto, sus objetivos y lo que buscas"
                    className="w-full p-3 border rounded-lg min-h-[120px]"
                    required
                />
            </div>
            
            <div className="mb-4">
                <label className="block text-sm font-medium mb-1">Requisitos</label>
                <textarea
                    name="projectRequirements"
                    value={projectData.projectRequirements}
                    onChange={handleInputChange}
                    placeholder="Detalla los requisitos o habilidades necesarias para participar"
                    className="w-full p-3 border rounded-lg min-h-[80px]"
                />
            </div>
            
            <div className="mb-4">
                <label className="block text-sm font-medium mb-1">Metas</label>
                <textarea
                    name="projectGoals"
                    value={projectData.projectGoals}
                    onChange={handleInputChange}
                    placeholder="¬øCu√°les son las metas a corto y largo plazo del proyecto?"
                    className="w-full p-3 border rounded-lg min-h-[80px]"
                />
            </div>
            
            <div className="mb-4">
                <label className="block text-sm font-medium mb-1">Tiempo de Expiraci√≥n</label>
                <div className="flex items-center">
                    <Calendar size={20} className="mr-2 text-gray-500" />
                    <select
                        name="expirationDays"
                        value={projectData.expirationDays}
                        onChange={handleInputChange}
                        className="p-2 border rounded-lg"
                    >
                        <option value="7">7 d√≠as</option>
                        <option value="14">14 d√≠as</option>
                        <option value="30">30 d√≠as</option>
                        <option value="60">60 d√≠as</option>
                        <option value="90">90 d√≠as</option>
                    </select>
                </div>
            </div>

            {imagePreview && (
                <div className="mt-4 mb-4">
                    <img src={imagePreview} alt="Vista previa" className="w-full h-auto rounded-lg" />
                </div>
            )}

            <div className="flex justify-between items-center mt-6">
                <div className="flex items-center">
                    <label className="flex items-center text-primary hover:text-primary-dark transition-colors duration-200 cursor-pointer">
                        <Image size={20} className="mr-2" />
                        <span>A√±adir imagen</span>
                        <input type="file" accept="image/*" className="hidden" onChange={handleImageChange} />
                    </label>
                </div>

                <div className="flex space-x-3">
                    <button
                        onClick={resetForm}
                        className="px-4 py-2 border border-gray-300 rounded-lg"
                    >
                        Cancelar
                    </button>
                    <button
                        className="bg-primary text-white rounded-lg px-4 py-2 hover:bg-primary-dark transition-colors duration-200 flex items-center"
                        onClick={handleProjectCreation}
                        disabled={isPending}
                    >
                        {isPending ? (
                            <>
                                <Loader className="size-5 animate-spin mr-2" />
                                Creando...
                            </>
                        ) : (
                            "Publicar Proyecto"
                        )}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ProjectCreation;

================
File: frontend\src\components\ProjectPost.jsx
================
// backend/models/projectPost.model.js
import mongoose from "mongoose";

const projectPostSchema = new mongoose.Schema(
    {
        author: { 
            type: mongoose.Schema.Types.ObjectId, 
            ref: "User", 
            required: true 
        },
        title: { 
            type: String, 
            required: true 
        },
        content: { 
            type: String, 
            required: true 
        },
        image: { 
            type: String 
        },
        likes: [{ 
            type: mongoose.Schema.Types.ObjectId, 
            ref: "User" 
        }],
        comments: [
            {
                content: { type: String },
                user: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
                createdAt: { type: Date, default: Date.now },
            },
        ],
        interestedUsers: [
            {
                user: { 
                    type: mongoose.Schema.Types.ObjectId, 
                    ref: "User" 
                },
                createdAt: { 
                    type: Date, 
                    default: Date.now 
                },
            },
        ],
        expirationDate: {
            type: Date,
            default: function() {
                // Default to 30 days from creation
                const date = new Date();
                date.setDate(date.getDate() + 30);
                return date;
            },
            required: true
        },
        status: {
            type: String,
            enum: ["active", "completed", "expired"],
            default: "active"
        },
        projectRequirements: { 
            type: String 
        },
        projectGoals: { 
            type: String 
        }
    },
    { timestamps: true }
);

// Index to help with finding expired projects
projectPostSchema.index({ expirationDate: 1 });
projectPostSchema.index({ status: 1 });
projectPostSchema.index({ author: 1 });

// Virtual field to check if project is expired
projectPostSchema.virtual('isExpired').get(function() {
    return new Date() > this.expirationDate;
});

// Middleware to automatically mark projects as expired
projectPostSchema.pre(['find', 'findOne'], async function(next) {
    try {
        // Only update if we're not specifically querying expired projects
        if (!this._conditions.status || this._conditions.status !== 'expired') {
            await mongoose.model('ProjectPost').updateMany(
                { 
                    status: 'active',
                    expirationDate: { $lt: new Date() }
                },
                { 
                    $set: { status: 'expired' }
                }
            );
        }
        next();
    } catch (error) {
        next(error);
    }
});

const ProjectPost = mongoose.model("ProjectPost", projectPostSchema);

export default ProjectPost;

================
File: frontend\src\components\QuestionnaireModal.jsx
================
// frontend/src/components/QuestionnaireModal.jsx
import React, { useState } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { axiosInstance } from '../lib/axios';
import toast from 'react-hot-toast';
import { Briefcase, CheckCircle, ArrowRight, ArrowLeft, Globe, Calendar } from 'lucide-react';

const QuestionnaireModal = ({ isOpen, onClose, user }) => {
  const queryClient = useQueryClient();
  const [step, setStep] = useState(1);
  const [companyInfo, setCompanyInfo] = useState(user?.companyInfo || {});
  const [hasWebsite, setHasWebsite] = useState(!!user?.companyInfo?.website);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Check if required fields for the current step are filled
  const canProceed = () => {
    if (step === 1) {
      return !!companyInfo.companyName;
    }
    return true;
  };

  // Mutation to save company info and mark first login as completed
  const { mutate: completeSetup } = useMutation({
    mutationFn: async () => {
      // If website toggle is off, remove website field
      const dataToSubmit = { ...companyInfo };
      if (!hasWebsite) {
        dataToSubmit.website = "";
      }
      
      return axiosInstance.put('/users/complete-first-login', {
        companyInfo: dataToSubmit
      });
    },
    onSuccess: () => {
      toast.success('¬°Informaci√≥n de la empresa guardada exitosamente!');
      
      // Update user data in the cache
      queryClient.invalidateQueries(['authUser']);
      
      // Close modal and reset state
      setIsSubmitting(false);
      if (onClose) onClose();
    },
    onError: (error) => {
      toast.error(error.response?.data?.message || 'Error al guardar la informaci√≥n');
      setIsSubmitting(false);
    }
  });

  const handleSubmit = () => {
    setIsSubmitting(true);
    completeSetup();
  };

  const handleSkip = () => {
    if (window.confirm('¬øEst√°s seguro de que deseas omitir el cuestionario? La informaci√≥n de tu empresa no estar√° completa.')) {
      setIsSubmitting(true);
      completeSetup();
    }
  };

  // Don't render anything if the modal isn't open
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto bg-black bg-opacity-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="bg-primary text-white px-6 py-4 flex justify-between items-center rounded-t-lg">
          <div className="flex items-center">
            <Briefcase className="mr-2" />
            <h2 className="text-xl font-bold">Configuraci√≥n de Informaci√≥n de Empresa</h2>
          </div>
        </div>
        
        {/* Body */}
        <div className="p-6">
          {/* Progress indicator */}
          <div className="mb-6 flex justify-between items-center">
            <div className="flex items-center">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                step >= 1 ? 'bg-primary text-white' : 'bg-gray-200'
              }`}>
                1
              </div>
              <div className={`h-1 w-12 ${step >= 2 ? 'bg-primary' : 'bg-gray-200'}`}></div>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                step >= 2 ? 'bg-primary text-white' : 'bg-gray-200'
              }`}>
                2
              </div>
            </div>
            <div>
              Paso {step} de 2
            </div>
          </div>
          
          {/* Step content */}
          {step === 1 && (
            <div>
              <h3 className="text-lg font-semibold mb-4">Informaci√≥n B√°sica de la Empresa</h3>
              <p className="text-gray-600 mb-4">
                Como usuario empresario, necesitamos algunos detalles sobre su negocio para mostrar en su perfil.
                Esta informaci√≥n ayudar√° a los egresados a conocer mejor su empresa.
              </p>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Nombre de la Empresa *</label>
                  <input
                    type="text"
                    value={companyInfo.companyName || ''}
                    onChange={(e) => setCompanyInfo({...companyInfo, companyName: e.target.value})}
                    className="mt-1 p-2 w-full border rounded-md"
                    required
                  />
                  <p className="text-xs text-gray-500 mt-1">Campo obligatorio</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Industria</label>
                  <input
                    type="text"
                    value={companyInfo.industry || ''}
                    onChange={(e) => setCompanyInfo({...companyInfo, industry: e.target.value})}
                    className="mt-1 p-2 w-full border rounded-md"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">A√±o de Fundaci√≥n</label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Calendar className="h-5 w-5 text-gray-400" />
                    </div>
                    <input
                      type="number"
                      min="1900"
                      max={new Date().getFullYear()}
                      value={companyInfo.foundedYear || ''}
                      onChange={(e) => setCompanyInfo({...companyInfo, foundedYear: e.target.value})}
                      className="mt-1 p-2 pl-10 w-full border rounded-md"
                      placeholder={new Date().getFullYear()}
                    />
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Ubicaci√≥n</label>
                  <input
                    type="text"
                    value={companyInfo.location || ''}
                    onChange={(e) => setCompanyInfo({...companyInfo, location: e.target.value})}
                    className="mt-1 p-2 w-full border rounded-md"
                  />
                </div>
              </div>
            </div>
          )}
          
          {step === 2 && (
            <div>
              <h3 className="text-lg font-semibold mb-4">Detalles Adicionales</h3>
              <p className="text-gray-600 mb-4">
                Proporcione informaci√≥n adicional que ayude a presentar mejor su empresa a los egresados.
              </p>
              
              <div className="space-y-4">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className="block text-sm font-medium text-gray-700">Sitio Web</label>
                    <div className="flex items-center">
                      <span className="text-sm text-gray-500 mr-2">
                        {hasWebsite ? "Activado" : "Desactivado"}
                      </span>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input 
                          type="checkbox" 
                          checked={hasWebsite}
                          onChange={(e) => setHasWebsite(e.target.checked)}
                          className="sr-only peer" 
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>
                  </div>
                  {hasWebsite && (
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <Globe className="h-5 w-5 text-gray-400" />
                      </div>
                      <input
                        type="url"
                        value={companyInfo.website || ''}
                        onChange={(e) => setCompanyInfo({...companyInfo, website: e.target.value})}
                        className="mt-1 p-2 pl-10 w-full border rounded-md"
                        placeholder="https://"
                      />
                    </div>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Cantidad de Empleados</label>
                  <select
                    value={companyInfo.employees || ''}
                    onChange={(e) => setCompanyInfo({...companyInfo, employees: e.target.value})}
                    className="mt-1 p-2 w-full border rounded-md"
                  >
                    <option value="">Seleccionar</option>
                    <option value="1-10">1-10 empleados</option>
                    <option value="11-50">11-50 empleados</option>
                    <option value="51-200">51-200 empleados</option>
                    <option value="201-500">201-500 empleados</option>
                    <option value="501+">501+ empleados</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Descripci√≥n</label>
                  <textarea
                    value={companyInfo.description || ''}
                    onChange={(e) => setCompanyInfo({...companyInfo, description: e.target.value})}
                    rows="4"
                    className="mt-1 p-2 w-full border rounded-md"
                    placeholder="Describa brevemente su empresa, actividades y misi√≥n..."
                  ></textarea>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Email de Contacto</label>
                  <input
                    type="email"
                    value={companyInfo.contactEmail || ''}
                    onChange={(e) => setCompanyInfo({...companyInfo, contactEmail: e.target.value})}
                    className="mt-1 p-2 w-full border rounded-md"
                    placeholder="contacto@empresa.com"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Tel√©fono de Contacto</label>
                  <input
                    type="tel"
                    value={companyInfo.contactPhone || ''}
                    onChange={(e) => setCompanyInfo({...companyInfo, contactPhone: e.target.value})}
                    className="mt-1 p-2 w-full border rounded-md"
                    placeholder="+52 (123) 456-7890"
                  />
                </div>
              </div>
            </div>
          )}
        </div>
        
        {/* Footer */}
        <div className="px-6 py-4 bg-gray-50 flex justify-between items-center rounded-b-lg">
          {step === 1 ? (
            <button
              onClick={handleSkip}
              className="text-gray-500 hover:text-gray-700"
              disabled={isSubmitting}
            >
              Omitir por ahora
            </button>
          ) : (
            <button
              onClick={() => setStep(step - 1)}
              className="flex items-center text-gray-700 hover:text-gray-900"
              disabled={isSubmitting}
            >
              <ArrowLeft size={16} className="mr-1" />
              Anterior
            </button>
          )}
          
          {step < 2 ? (
            <button
              onClick={() => setStep(step + 1)}
              disabled={!canProceed() || isSubmitting}
              className={`flex items-center bg-primary text-white px-4 py-2 rounded-md ${
                !canProceed() ? 'opacity-50 cursor-not-allowed' : 'hover:bg-primary-dark'
              }`}
            >
              Siguiente
              <ArrowRight size={16} className="ml-1" />
            </button>
          ) : (
            <button
              onClick={handleSubmit}
              disabled={isSubmitting}
              className="flex items-center bg-primary text-white px-4 py-2 rounded-md hover:bg-primary-dark"
            >
              {isSubmitting ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Guardando...
                </>
              ) : (
                <>
                  <CheckCircle size={16} className="mr-1" />
                  Completar Configuraci√≥n
                </>
              )}
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default QuestionnaireModal;

================
File: frontend\src\components\RecommendedUser.jsx
================
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { axiosInstance } from "../lib/axios";
import toast from "react-hot-toast";
import { Link } from "react-router-dom";
import { Check, Clock, UserCheck, UserPlus, X } from "lucide-react";


import { useState } from 'react';
import { Search } from "lucide-react";

const RecommendedUser = ({ user }) => {
	const queryClient = useQueryClient();

	const { data: connectionStatus, isLoading } = useQuery({
		queryKey: ["connectionStatus", user._id],
		queryFn: () => axiosInstance.get(`/connections/status/${user._id}`),
	});

	const { mutate: sendConnectionRequest } = useMutation({
		mutationFn: (userId) => axiosInstance.post(`/connections/request/${userId}`),
		onSuccess: () => {
			toast.success("Solicitud enviada");
			queryClient.invalidateQueries({ queryKey: ["connectionStatus", user._id] });
		},
		onError: (error) => {
			toast.error(error.response?.data?.error || "Ocurrio un problema");
		},
	});

	const { mutate: acceptRequest } = useMutation({
		mutationFn: (requestId) => axiosInstance.put(`/connections/accept/${requestId}`),
		onSuccess: () => {
			toast.success("Conexi√≥n aceptada");
			queryClient.invalidateQueries({ queryKey: ["connectionStatus", user._id] });
		},
		onError: (error) => {
			toast.error(error.response?.data?.error || "Ocurrio un problema");
		},
	});

	const { mutate: rejectRequest } = useMutation({
		mutationFn: (requestId) => axiosInstance.put(`/connections/reject/${requestId}`),
		onSuccess: () => {
			toast.success("Conexi√≥n rechazada");
			queryClient.invalidateQueries({ queryKey: ["connectionStatus", user._id] });
		},
		onError: (error) => {
			toast.error(error.response?.data?.error || "ocurrio un problema");
		},
	});

	const renderButton = () => {
		if (isLoading) {
			return (
				<button className='px-3 py-1 rounded-full text-sm bg-gray-200 text-gray-500' disabled>
					Loading...
				</button>
			);
		}

		switch (connectionStatus?.data?.status) {
			case "pending":
				return (
					<button
						className='px-3 py-1 rounded-full text-xs bg-yellow-500 text-white flex items-center'
						disabled
					>
						<Clock size={14} className='mr-1' />
						Pendiente
					</button>
				);
			case "received":
				return (
					<div className='flex gap-2 justify-center'>
						<button
							onClick={() => acceptRequest(connectionStatus.data.requestId)}
							className={`rounded-full p-1 flex items-center justify-center bg-green-500 hover:bg-green-600 text-white`}
						>
							<Check size={16} />
						</button>
						<button
							onClick={() => rejectRequest(connectionStatus.data.requestId)}
							className={`rounded-full p-1 flex items-center justify-center bg-red-500 hover:bg-red-600 text-white`}
						>
							<X size={16} />
						</button>
					</div>
				);
			case "connected":
				return (
					<button
						className='px-3 py-1 rounded-full text-sm bg-green-500 text-white flex items-center'
						disabled
					>
						<UserCheck size={15} className='mr-1' />
						conectado
					</button>
				);
			default:
				return (
					<button
						className='px-1 py-1 rounded-full text-sm border border-primary text-xs hover:bg-primary hover:text-white transition-colors duration-200 flex items-center'
						onClick={handleConnect}
					>
						<UserPlus size={14} className='mr-1' />
						Hacer conexi√≥n
					</button>
				);
		}
	};

	const handleConnect = () => {
		if (connectionStatus?.data?.status === "not_connected") {
			sendConnectionRequest(user._id);
		}
	};

	return (
		<div className='flex items-center justify-between mb-4'>
			<Link to={`/profile/${user.username}`} className='flex items-center flex-grow'>
				<img
					src={user.profilePicture || "/avatar.png"}
					alt={user.name}
					className='w-12 h-12 rounded-full mr-3'
				/>
				<div>
					<h3 className='font-semibold text-sm'>{user.name}</h3>
					<p className='text-xs text-info'>{user.headline}</p>
				</div>
			</Link>
			{renderButton()}
		</div>
	);
};



export default RecommendedUser;

================
File: frontend\src\components\Sidebar.jsx
================
import { Link } from "react-router-dom";
import { Home, UserPlus, Bell } from "lucide-react";

export default function Sidebar({ user }) {
	return (
		<div className='bg-secondary rounded-lg shadow'>
			<div className='p-4 text-center'>
				<div
					className='h-16 rounded-t-lg bg-cover bg-center'
					style={{
						backgroundImage: `url("${user.bannerImg || "/banner.png"}")`,
					}}
				/>
				<Link to={`/profile/${user.username}`}>
					<img
						src={user.profilePicture || "/avatar.png"}
						alt={user.name}
						className='w-20 h-20 rounded-full mx-auto mt-[-40px]'
					/>
					<h2 className='text-xl font-semibold mt-2'>{user.name}</h2>
				</Link>
				<p className='text-info'>{user.headline}</p>
				<p className='text-info text-xs'>{user.connections.length} contactos</p>
			</div>
			<div className='border-t border-base-100 p-4'>
				<nav>
					<ul className='space-y-2'>
						<li>
							<Link
								to='/'
								className='flex items-center py-2 px-4 rounded-md hover:bg-primary hover:text-white transition-colors'
							>
								<Home className='mr-2' size={20} /> Inicio
							</Link>
						</li>
						<li>
							<Link
								to='/network'
								className='flex items-center py-2 px-4 rounded-md hover:bg-primary hover:text-white transition-colors'
							>
								<UserPlus className='mr-2' size={20} /> Mis contactos
							</Link>
						</li>
						<li>
							<Link
								to='/notifications'
								className='flex items-center py-2 px-4 rounded-md hover:bg-primary hover:text-white transition-colors'
							>
								<Bell className='mr-2' size={20} /> Notificaciones
							</Link>
						</li>
					</ul>
				</nav>
			</div>
			<div className='border-t border-base-100 p-4'>
				<Link to={`/profile/${user.username}`} className='text-sm font-semibold'>
					Mi perfil
				</Link>
			</div>
		</div>
	);
}

================
File: frontend\src\components\SkillsSection.jsx
================
import { X } from "lucide-react";
import { useState } from "react";

const SkillsSection = ({ userData, isOwnProfile, onSave }) => {
	const [isEditing, setIsEditing] = useState(false);
	const [skills, setSkills] = useState(userData.skills || []);
	const [newSkill, setNewSkill] = useState("");

	const handleAddSkill = () => {
		if (newSkill && !skills.includes(newSkill)) {
			setSkills([...skills, newSkill]);
			setNewSkill("");
		}
	};

	const handleDeleteSkill = (skill) => {
		setSkills(skills.filter((s) => s !== skill));
	};

	const handleSave = () => {
		onSave({ skills });
		setIsEditing(false);
	};

	return (
		<div className='bg-white shadow rounded-lg p-6'>
			<h2 className='text-xl font-semibold mb-4'>Habilidades</h2>
			<div className='flex flex-wrap'>
				{skills.map((skill, index) => (
					<span
						key={index}
						className='bg-gray-200 text-gray-700 px-3 py-1 rounded-full text-sm mr-2 mb-2 flex items-center'
					>
						{skill}
						{isEditing && (
							<button onClick={() => handleDeleteSkill(skill)} className='ml-2 text-red-500'>
								<X size={14} />
							</button>
						)}
					</span>
				))}
			</div>

			{isEditing && (
				<div className='mt-4 flex'>
					<input
						type='text'
						placeholder='Nueva habilidad'
						value={newSkill}
						onChange={(e) => setNewSkill(e.target.value)}
						className='flex-grow p-2 border rounded-l'
					/>
					<button
						onClick={handleAddSkill}
						className='bg-primary text-white py-2 px-4 rounded-r hover:bg-primary-dark transition duration-300'
					>
						A√É¬±adir habilidad
					</button>
				</div>
			)}

			{isOwnProfile && (
				<>
					{isEditing ? (
						<button
							onClick={handleSave}
							className='mt-4 bg-primary text-white py-2 px-4 rounded hover:bg-primary-dark transition duration-300'
						>
							Guardar cambios
						</button>
					) : (
						<button
							onClick={() => setIsEditing(true)}
							className='mt-4 text-primary hover:text-primary-dark transition duration-300'
						>
							Editar habilidades
						</button>
					)}
				</>
			)}
		</div>
	);
};
export default SkillsSection;

================
File: frontend\src\components\UserCard.jsx
================
import { Link } from "react-router-dom";

function UserCard({ user, isConnection }) {
	return (
		<div className='bg-white rounded-lg shadow p-4 flex flex-col items-center transition-all hover:shadow-md'>
			<Link to={`/profile/${user.username}`} className='flex flex-col items-center'>
				<img
					src={user.profilePicture || "/avatar.png"}
					alt={user.name}
					className='w-24 h-24 rounded-full object-cover mb-4'
				/>
				<h3 className='font-semibold text-lg text-center'>{user.name}</h3>
			</Link>
			<p className='text-gray-600 text-center'>{user.headline}</p>
			<p className='text-sm text-gray-500 mt-2'>{user.connections?.length} conexiones</p>
			<button className='mt-4 bg-primary text-white px-4 py-2 rounded-md hover:bg-primary-dark transition-colors w-full'>
				{isConnection ? "Conectados" : "Connect"}
			</button>
		</div>
	);
}

export default UserCard;

================
File: frontend\src\components\auth\LoginForm.jsx
================
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useState } from "react";
import { axiosInstance } from "../../lib/axios";
import toast from "react-hot-toast";
import { Loader } from "lucide-react";

const LoginForm = () => {
	const [username, setUsername] = useState("");
	const [password, setPassword] = useState("");
	const queryClient = useQueryClient();

	const { mutate: loginMutation, isLoading } = useMutation({
		mutationFn: (userData) => axiosInstance.post("/auth/login", userData),
		onSuccess: (response) => {
			// Store the isFirstLogin status from the response if it exists
			if (response.data && response.data.isFirstLogin !== undefined) {
				// Pass isFirstLogin to authUser invalidation
				queryClient.invalidateQueries({ 
					queryKey: ["authUser"],
					// When refetching, add the isFirstLogin flag to the result
					updater: (oldData) => {
						if (oldData) {
							return {
								...oldData,
								isFirstLogin: response.data.isFirstLogin
							};
						}
						return oldData;
					}
				});
			} else {
				// Standard invalidation without updater if no isFirstLogin
				queryClient.invalidateQueries({ queryKey: ["authUser"] });
			}
		},
		onError: (err) => {
			toast.error(err.response.data.message || "Something went wrong");
		},
	});

	const handleSubmit = (e) => {
		e.preventDefault();
		loginMutation({ username, password });
	};

	return (
		<form onSubmit={handleSubmit} className='space-y-4 w-full max-w-md'>
			<input
				type='text'
				placeholder='Usuario'
				value={username}
				onChange={(e) => setUsername(e.target.value)}
				className='input input-bordered w-full'
				required
			/>
			<input
				type='password'
				placeholder='Contrase√É¬±a'
				value={password}
				onChange={(e) => setPassword(e.target.value)}
				className='input input-bordered w-full'
				required
			/>

			<button type='submit' className='btn btn-primary w-full'>
				{isLoading ? <Loader className='size-5 animate-spin' /> : "Entrar"}
			</button>
		</form>
	);
};
export default LoginForm;

================
File: frontend\src\components\auth\SignUpForm.jsx
================
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import axios from 'axios';

const SignupForm = () => {
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        name: '',
        username: '',
        email: '',
        studentId: '', // New field
        password: '',
        confirmPassword: ''
    });
    
    const [loading, setLoading] = useState(false);
    
    const handleChange = (e) => {
        const { name, value } = e.target;
        
        if (name === 'studentId') {
            // Auto-generate email based on student ID
            if (/^\d{8}$/.test(value)) {
                const generatedEmail = `L${value}@tuxtla.tecnm.mx`;
                setFormData({
                    ...formData,
                    studentId: value,
                    email: generatedEmail
                });
            } else {
                setFormData({
                    ...formData,
                    studentId: value,
                });
            }
        } else {
            setFormData({
                ...formData,
                [name]: value
            });
        }
    };
    
    const handleSubmit = async (e) => {
        e.preventDefault();
        
        if (formData.password !== formData.confirmPassword) {
            toast.error('Las contrase√±as no coinciden');
            return;
        }
        
        // Validate student ID format
        if (!/^\d{8}$/.test(formData.studentId)) {
            toast.error('ID de estudiante inv√°lido. Debe ser un n√∫mero de 8 d√≠gitos.');
            return;
        }
        
        // Validate institutional email format
        const expectedEmail = `L${formData.studentId}@tuxtla.tecnm.mx`;
        if (formData.email !== expectedEmail) {
            toast.error('El correo institucional debe coincidir con tu ID de estudiante');
            return;
        }
        
        try {
            setLoading(true);
            
            const { confirmPassword, ...dataToSend } = formData;
            
			const response = await axios.post('http://localhost:5000/api/v1/auth/signup', dataToSend);
            
            toast.success(response.data.message || 'Registro exitoso');
            navigate('/login');
        } catch (error) {
            toast.error(error.response?.data?.message || 'Error al registrarse');
        } finally {
            setLoading(false);
        }
    };
    
    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            {/* Existing name and username fields */}
            <div>
                <label className="label">Nombre completo</label>
                <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    className="input input-bordered w-full"
                    required
                />
            </div>
            
            <div>
                <label className="label">Nombre de usuario</label>
                <input
                    type="text"
                    name="username"
                    value={formData.username}
                    onChange={handleChange}
                    className="input input-bordered w-full"
                    required
                />
            </div>
            
            {/* New student ID field */}
            <div>
                <label className="label">ID de Estudiante (8 d√≠gitos)</label>
                <input
                    type="text"
                    name="studentId"
                    value={formData.studentId}
                    onChange={handleChange}
                    className="input input-bordered w-full"
                    placeholder="Ejemplo: 20270806"
                    required
                />
            </div>
            
            {/* Auto-generated email field (read-only) */}
            <div>
                <label className="label">Correo Institucional</label>
                <input
                    type="email"
                    name="email"
                    value={formData.email}
                    className="input input-bordered w-full"
                    readOnly
                    required
                />
                <p className="text-xs text-gray-500 mt-1">
                    El correo se genera autom√°ticamente a partir de tu ID de estudiante
                </p>
            </div>
            
            {/* Password fields */}
            <div>
                <label className="label">Contrase√±a</label>
                <input
                    type="password"
                    name="password"
                    value={formData.password}
                    onChange={handleChange}
                    className="input input-bordered w-full"
                    required
                    minLength={6}
                />
            </div>
            
            <div>
                <label className="label">Confirmar Contrase√±a</label>
                <input
                    type="password"
                    name="confirmPassword"
                    value={formData.confirmPassword}
                    onChange={handleChange}
                    className="input input-bordered w-full"
                    required
                    minLength={6}
                />
            </div>
            
            <button 
                type="submit" 
                className="btn btn-primary w-full"
                disabled={loading}
            >
                {loading ? 'Registrando...' : 'Registrarse'}
            </button>
        </form>
    );
};

export default SignupForm;

================
File: frontend\src\components\layout\Layout.jsx
================
import Navbar from "./Navbar";

const Layout = ({ children }) => {
	return (
		<div className='min-h-screen bg-base-100'>
			<Navbar />
			<main className='max-w-7xl mx-auto px-4 py-6'>{children}</main>
		</div>
	);
};
export default Layout;

================
File: frontend\src\components\layout\Navbar.jsx
================
// frontend/src/components/layout/Navbar.jsx
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { axiosInstance } from "../../lib/axios";
import { Link } from "react-router-dom";
import { Bell, Home, LogOut, User, Users, Settings, Briefcase } from "lucide-react";

const Navbar = () => {
    const { data: authUser } = useQuery({ queryKey: ["authUser"] });
    const queryClient = useQueryClient();

    const { data: notifications } = useQuery({
        queryKey: ["notifications"],
        queryFn: async () => axiosInstance.get("/notifications"),
        enabled: !!authUser,
    });

    const { data: connectionRequests } = useQuery({
        queryKey: ["connectionRequests"],
        queryFn: async () => axiosInstance.get("/connections/requests"),
        enabled: !!authUser,
    });

    const { mutate: logout } = useMutation({
        mutationFn: () => axiosInstance.post("/auth/logout"),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ["authUser"] });
        },
    });

    const unreadNotificationCount = notifications?.data.filter((notif) => !notif.read).length;
    const unreadConnectionRequestsCount = connectionRequests?.data?.length;

    return (
        <nav className='shadow-md sticky top-0 z-10' style={{ backgroundColor: '#1b386a' }}>
    <div className='maindigox-w-7xl mx-auto px-4'>
        <div className='flex justify-between items-center py-3'>
            {/* Rest of the code remains the same */}
                    <div className='flex items-center space-x-4'>
                        <Link to='/'>
                            <img className='h-8 rounded' src='/small-logo.png' alt='LinkedIn' />
                        </Link>
                    </div>
                    <div className='flex items-center gap-2 md:gap-6'>
                        {authUser ? (
                            <>
                                <Link to={"/"} className='text-zinc-50 flex flex-col items-center'>
                                    <Home size={20} />
                                    <span className='text-xs hidden md:block'>Inicio</span>
                                </Link>
                                
                                <Link to='/projects' className='text-zinc-50 flex flex-col items-center'>
                                    <Briefcase size={20} />
                                    <span className='text-xs hidden md:block'>Proyectos</span>
                                </Link>

                                <Link to='/network' className='text-zinc-50 flex flex-col items-center relative'>
                                    <Users size={20} />
                                    <span className='text-xs hidden md:block'>Contactos</span>
                                    {unreadConnectionRequestsCount > 0 && (
                                        <span
                                            className='absolute -top-1 -right-1 md:right-4 bg-blue-500 text-white text-xs 
                                            rounded-full size-3 md:size-4 flex items-center justify-center'
                                        >
                                            {unreadConnectionRequestsCount}
                                        </span>
                                    )}
                                </Link>

                                <Link to='/notifications' className='text-zinc-50 flex flex-col items-center relative'>
                                    <Bell size={20} />
                                    <span className='text-xs hidden md:block'>Notificaciones</span>
                                    {unreadNotificationCount > 0 && (
                                        <span
                                            className='absolute -top-1 -right-1 md:right-4 bg-blue-500 text-white text-xs 
                                            rounded-full size-3 md:size-4 flex items-center justify-center'
                                        >
                                            {unreadNotificationCount}
                                        </span>
                                    )}
                                </Link>

                                <Link
                                    to={`/profile/${authUser.username}`}
                                    className='text-zinc-50 flex flex-col items-center'
                                >
                                    <User size={20} />
                                    <span className='text-xs hidden md:block'>Acerca de mi</span>
                                </Link>
                                
                                {authUser.role === 'administrador' && (
                                    <Link to='/admin' className='text-zinc-50 flex flex-col items-center'>
                                        <Settings size={20} />
                                        <span className='text-xs hidden md:block'>Admin</span>
                                    </Link>
                                )}
                                
                                <button
                                    className='flex items-center space-x-1 text-sm text-gray-400 hover:text-zinc-200'
                                    onClick={() => logout()}
                                >
                                    <LogOut size={20} />
                                    <span className='hidden md:inline'>cerrar sesi√≥n</span>
                                </button>
                            </>
                        ) : (
                            <>
                                <Link to='/login' className='btn btn-primary'>
                                    Iniciar sesi√≥n
                                </Link>
                                <Link to='/signup' className='btn btn-primary'>
                                    Registrarse
                                </Link>
                            </>
                        )}
                    </div>
                </div>
            </div>
        </nav>
    );
};

export default Navbar;

================
File: frontend\src\lib\axios.js
================
import axios from "axios";

export const axiosInstance = axios.create({
	baseURL: import.meta.env.MODE === "development" ? "http://localhost:5000/api/v1" : "/api/v1",
	withCredentials: true,
});

================
File: frontend\src\pages\AdminDashboardPage.jsx
================
import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { axiosInstance } from '../lib/axios';
import toast from 'react-hot-toast';
import { Loader, Trash2, UserPlus, Edit, Search, AlertCircle } from 'lucide-react';

const AdminDashboardPage = () => {
  const [isAddingUser, setIsAddingUser] = useState(false);
  const [newUser, setNewUser] = useState({
    name: '',
    username: '',
    email: '',
    password: '',
    studentId: '', // Added the studentId field
    role: 'egresado',
  });
  const [search, setSearch] = useState('');
  const [activeTab, setActiveTab] = useState('users'); // 'users' or 'banned'
  
  const queryClient = useQueryClient();
  
  const { data: users, isLoading } = useQuery({
    queryKey: ['admin-users'],
    queryFn: async () => {
      const res = await axiosInstance.get('/admin/users');
      return res.data;
    },
  });
  
  const { data: bannedUsers, isLoading: isLoadingBanned } = useQuery({
    queryKey: ['admin-banned-users'],
    queryFn: async () => {
      const res = await axiosInstance.get('/admin/banned-users');
      return res.data;
    },
    enabled: activeTab === 'banned', // Only fetch when the tab is active
  });
  
  const { mutate: createUser, isPending: isCreatingUser } = useMutation({
    mutationFn: async (userData) => {
      return axiosInstance.post('/admin/users', userData);
    },
    onSuccess: () => {
      toast.success('Usuario creado exitosamente');
      setIsAddingUser(false);
      setNewUser({
        name: '',
        username: '',
        email: '',
        password: '',
        studentId: '', // Reset studentId field
        role: 'egresado',
      });
      queryClient.invalidateQueries(['admin-users']);
    },
    onError: (error) => {
      toast.error(error.response?.data?.message || 'Error al crear usuario');
    },
  });
  
  const { mutate: deleteUser } = useMutation({
    mutationFn: async (userId) => {
      return axiosInstance.delete(`/admin/users/${userId}`);
    },
    onSuccess: () => {
      toast.success('Usuario eliminado exitosamente');
      queryClient.invalidateQueries(['admin-users']);
    },
    onError: (error) => {
      toast.error(error.response?.data?.message || 'Error al eliminar usuario');
    },
  });
  
  const { mutate: updateUserRole } = useMutation({
    mutationFn: async ({ userId, role }) => {
      return axiosInstance.put(`/admin/users/${userId}/role`, { role });
    },
    onSuccess: () => {
      toast.success('Rol actualizado exitosamente');
      queryClient.invalidateQueries(['admin-users']);
    },
    onError: (error) => {
      toast.error(error.response?.data?.message || 'Error al actualizar rol');
    },
  });
  
  const { mutate: banUser } = useMutation({
    mutationFn: async ({ userId, reason }) => {
      return axiosInstance.post(`/admin/users/${userId}/ban`, { reason });
    },
    onSuccess: () => {
      toast.success('Usuario baneado exitosamente');
      queryClient.invalidateQueries(['admin-users']);
      queryClient.invalidateQueries(['admin-banned-users']);
    },
    onError: (error) => {
      toast.error(error.response?.data?.message || 'Error al banear usuario');
    },
  });
  
  const { mutate: unbanUser } = useMutation({
    mutationFn: async (studentId) => {
      return axiosInstance.delete(`/admin/banned-users/${studentId}`);
    },
    onSuccess: () => {
      toast.success('Usuario desbaneado exitosamente');
      queryClient.invalidateQueries(['admin-banned-users']);
    },
    onError: (error) => {
      toast.error(error.response?.data?.message || 'Error al desbanear usuario');
    },
  });
  
  const handleCreateUser = (e) => {
    e.preventDefault();
    createUser(newUser);
  };
  
  const handleDeleteUser = (userId) => {
    if (window.confirm('¬øEst√°s seguro de eliminar este usuario?')) {
      deleteUser(userId);
    }
  };
  
  const handleRoleChange = (userId, role) => {
    updateUserRole({ userId, role });
  };
  
  const handleBanUser = (userId, name) => {
    const reason = prompt(`Ingrese la raz√≥n para banear a ${name}:`);
    
    if (reason !== null) { // If user didn't cancel the prompt
      if (window.confirm(`¬øEst√°s seguro de banear a ${name}? Esta acci√≥n no se puede deshacer y el usuario no podr√° crear una nueva cuenta con el mismo ID.`)) {
        banUser({ userId, reason });
      }
    }
  };
  
  // Handle studentId change with automatic email generation for egresados
  const handleStudentIdChange = (e) => {
    const studentId = e.target.value;
    setNewUser({
      ...newUser, 
      studentId: studentId,
      // Auto-generate institutional email if it's a valid 8-digit ID and role is egresado
      email: newUser.role === 'egresado' && /^\d{8}$/.test(studentId) 
        ? `L${studentId}@tuxtla.tecnm.mx`
        : newUser.email
    });
  };
  
  // Handle role change and manage studentId/email accordingly
  const handleRoleInputChange = (e) => {
    const role = e.target.value;
    setNewUser({
      ...newUser,
      role: role,
      // If changing to egresado and we have a valid studentId, update the email
      email: role === 'egresado' && /^\d{8}$/.test(newUser.studentId)
        ? `L${newUser.studentId}@tuxtla.tecnm.mx`
        : newUser.email
    });
  };
  
  // Fixed filter function with proper null checks
  const filteredUsers = users?.filter(user => 
    (user && user.name && user.name.toLowerCase().includes(search.toLowerCase())) ||
    (user && user.email && user.email.toLowerCase().includes(search.toLowerCase())) ||
    (user && user.username && user.username.toLowerCase().includes(search.toLowerCase()))
  );
  
  const getRoleBadge = (role) => {
    switch(role) {
      case 'empresario':
        return (
          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
            Empresario
          </span>
        );
      case 'administrador':
        return (
          <span className="px-2 py-1 text-xs rounded-full bg-purple-100 text-purple-800">
            Administrador
          </span>
        );
      default:
        return (
          <span className="px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-800">
            Egresado
          </span>
        );
    }
  };
  
  return (
    <div className="bg-white rounded-lg shadow p-6">
      <h1 className="text-2xl font-bold mb-6">Panel de Administraci√≥n</h1>
      
      <div className="mb-6">
        <div className="flex border-b">
          <button
            className={`py-2 px-4 ${activeTab === 'users' 
              ? 'border-b-2 border-primary font-semibold' 
              : 'text-gray-500'}`}
            onClick={() => setActiveTab('users')}
          >
            Usuarios
          </button>
          <button
            className={`py-2 px-4 ${activeTab === 'banned' 
              ? 'border-b-2 border-primary font-semibold' 
              : 'text-gray-500'}`}
            onClick={() => setActiveTab('banned')}
          >
            Usuarios Baneados
          </button>
        </div>
      </div>
      
      {activeTab === 'users' && (
        <>
          <div className="mb-6 flex justify-between items-center">
            <div className="relative w-64">
              <input
                type="text"
                placeholder="Buscar usuarios..."
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border rounded-lg"
              />
              <Search className="absolute left-3 top-2.5 text-gray-400" size={18} />
            </div>
            
            <button 
              onClick={() => setIsAddingUser(true)}
              className="bg-primary text-white px-4 py-2 rounded-lg flex items-center"
            >
              <UserPlus size={18} className="mr-2" />
              Crear Usuario
            </button>
          </div>
          
          {isLoading ? (
            <div className="flex justify-center py-8">
              <Loader className="animate-spin" size={32} />
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full border-collapse">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="border p-2 text-left">Nombre</th>
                    <th className="border p-2 text-left">Usuario</th>
                    <th className="border p-2 text-left">Correo</th>
                    <th className="border p-2 text-left">Rol</th>
                    <th className="border p-2 text-center">Acciones</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredUsers?.map(user => (
                    <tr key={user._id} className="hover:bg-gray-50">
                      <td className="border p-2">
                        <div className="flex items-center">
                          <span>{user.name}</span>
                        </div>
                      </td>
                      <td className="border p-2">{user.username}</td>
                      <td className="border p-2">{user.email}</td>
                      <td className="border p-2">
                        <div className="flex items-center space-x-2">
                          {getRoleBadge(user.role)}
                          <select
                            value={user.role}
                            onChange={(e) => handleRoleChange(user._id, e.target.value)}
                            className="ml-2 p-1 border rounded"
                          >
                            <option value="egresado">Egresado</option>
                            <option value="empresario">Empresario</option>
                            <option value="administrador">Administrador</option>
                          </select>
                        </div>
                      </td>
                      <td className="border p-2 text-center">
                        <div className="flex justify-center space-x-2">
                          <button 
                            onClick={() => handleDeleteUser(user._id)}
                            className="text-red-500 hover:bg-red-100 p-1 rounded"
                            title="Eliminar Usuario"
                          >
                            <Trash2 size={18} />
                          </button>
                          
                          {/* Only show ban button for egresados */}
                          {user.role === 'egresado' && (
                            <button 
                              onClick={() => handleBanUser(user._id, user.name)}
                              className="text-orange-500 hover:bg-orange-100 p-1 rounded"
                              title="Banear Usuario"
                            >
                              <AlertCircle size={18} />
                            </button>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                  
                  {filteredUsers?.length === 0 && (
                    <tr>
                      <td colSpan="5" className="text-center py-4">
                        No se encontraron usuarios
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          )}
        </>
      )}
      
      {activeTab === 'banned' && (
        <div className="overflow-x-auto">
          {isLoadingBanned ? (
            <div className="flex justify-center py-8">
              <Loader className="animate-spin" size={32} />
            </div>
          ) : (
            <table className="w-full border-collapse">
              <thead>
                <tr className="bg-gray-100">
                  <th className="border p-2 text-left">ID Estudiante</th>
                  <th className="border p-2 text-left">Correo</th>
                  <th className="border p-2 text-left">Raz√≥n</th>
                  <th className="border p-2 text-left">Baneado Por</th>
                  <th className="border p-2 text-left">Fecha</th>
                  <th className="border p-2 text-center">Acciones</th>
                </tr>
              </thead>
              <tbody>
                {bannedUsers?.map(banned => (
                  <tr key={banned._id} className="hover:bg-gray-50">
                    <td className="border p-2">{banned.studentId}</td>
                    <td className="border p-2">{banned.email}</td>
                    <td className="border p-2">{banned.reason}</td>
                    <td className="border p-2">{banned.bannedBy?.name || 'N/A'}</td>
                    <td className="border p-2">
                      {new Date(banned.bannedAt).toLocaleString()}
                    </td>
                    <td className="border p-2 text-center">
                      <button 
                        onClick={() => {
                          if (window.confirm('¬øEst√°s seguro de desbanear a este usuario?')) {
                            unbanUser(banned.studentId);
                          }
                        }}
                        className="text-blue-500 hover:bg-blue-100 p-1 rounded"
                      >
                        Desbanear
                      </button>
                    </td>
                  </tr>
                ))}
                
                {(!bannedUsers || bannedUsers.length === 0) && (
                  <tr>
                    <td colSpan="6" className="text-center py-4">
                      No hay usuarios baneados
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          )}
        </div>
      )}
      
      {isAddingUser && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-semibold mb-4">Crear Nuevo Usuario</h2>
            <form onSubmit={handleCreateUser}>
              <div className="mb-4">
                <label className="block mb-1">Nombre completo</label>
                <input
                  type="text"
                  value={newUser.name}
                  onChange={(e) => setNewUser({...newUser, name: e.target.value})}
                  className="w-full p-2 border rounded"
                  required
                />
              </div>
              
              <div className="mb-4">
                <label className="block mb-1">Nombre de usuario</label>
                <input
                  type="text"
                  value={newUser.username}
                  onChange={(e) => setNewUser({...newUser, username: e.target.value})}
                  className="w-full p-2 border rounded"
                  required
                />
              </div>
              
              <div className="mb-4">
                <label className="block mb-1">Rol</label>
                <select
                  value={newUser.role}
                  onChange={handleRoleInputChange}
                  className="w-full p-2 border rounded"
                >
                  <option value="egresado">Egresado</option>
                  <option value="empresario">Empresario</option>
                  <option value="administrador">Administrador</option>
                </select>
              </div>
              
              {/* Student ID field - only displayed for 'egresado' role */}
              {newUser.role === 'egresado' && (
                <div className="mb-4">
                  <label className="block mb-1">ID de Estudiante (8 d√≠gitos)</label>
                  <input
                    type="text"
                    value={newUser.studentId}
                    onChange={handleStudentIdChange}
                    className="w-full p-2 border rounded"
                    placeholder="Ejemplo: 20270806"
                    required={newUser.role === 'egresado'}
                  />
                </div>
              )}
              
              <div className="mb-4">
                <label className="block mb-1">Correo electr√≥nico</label>
                <input
                  type="email"
                  value={newUser.email}
                  onChange={(e) => setNewUser({...newUser, email: e.target.value})}
                  className="w-full p-2 border rounded"
                  readOnly={newUser.role === 'egresado' && /^\d{8}$/.test(newUser.studentId)}
                  required
                />
                {newUser.role === 'egresado' && /^\d{8}$/.test(newUser.studentId) && (
                  <p className="text-xs text-gray-500 mt-1">
                    El correo se genera autom√°ticamente a partir del ID de estudiante
                  </p>
                )}
              </div>
              
              <div className="mb-4">
                <label className="block mb-1">Contrase√±a</label>
                <input
                  type="password"
                  value={newUser.password}
                  onChange={(e) => setNewUser({...newUser, password: e.target.value})}
                  className="w-full p-2 border rounded"
                  required
                />
              </div>
              
              <div className="flex justify-end gap-2">
                <button
                  type="button"
                  onClick={() => setIsAddingUser(false)}
                  className="px-4 py-2 border rounded-lg"
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  className="bg-primary text-white px-4 py-2 rounded-lg flex items-center"
                  disabled={isCreatingUser}
                >
                  {isCreatingUser ? <Loader className="animate-spin mr-2" size={18} /> : <UserPlus size={18} className="mr-2" />}
                  Crear Usuario
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminDashboardPage;

================
File: frontend\src\pages\HomePage.jsx
================
import { useQuery } from "@tanstack/react-query";
import { axiosInstance } from "../lib/axios";
import Sidebar from "../components/Sidebar";
import PostCreation from "../components/PostCreation";
import Post from "../components/Post";
import { Users, Newspaper, FileText,  } from "lucide-react";
import RecommendedUser from "../components/RecommendedUser";

const HomePage = () => {
	const { data: authUser } = useQuery({ queryKey: ["authUser"] });

	const { data: recommendedUsers } = useQuery({
		queryKey: ["recommendedUsers"],
		queryFn: async () => {
			const res = await axiosInstance.get("/users/suggestions?limit=5");
			return res.data;
		},
	});

	const { data: posts } = useQuery({
		queryKey: ["posts"],
		queryFn: async () => {
			const res = await axiosInstance.get("/posts");
			return res.data;
		},
	});

	console.log("posts", posts);

	return (
		<div className='grid grid-cols-1 lg:grid-cols-4 gap-6'>
			<div className='hidden lg:block lg:col-span-1'>
				<Sidebar user={authUser} />
			</div>

			<div className='col-span-1 lg:col-span-2 order-first lg:order-none'>
				<PostCreation user={authUser} />

				{posts?.map((post) => (
					<Post key={post._id} post={post} />
				))}

				{posts?.length === 0 && (
					<div className='bg-white rounded-lg shadow p-8 text-center'>
						<div className='mb-6'>
							<FileText    size={64} className='mx-auto text-blue-500' />
						</div>
						<h2 className='text-2xl font-bold mb-4 text-gray-800'>No hay publicaciones todav√≠a</h2>
						<p className='text-gray-600 mb-6'>A√±ade personas a tus contactos para porder ver sus posts</p>
					</div>
				)}
			</div>

			{recommendedUsers?.length > 0 && (
				<div className='col-span-1 lg:col-span-1 hidden lg:block'>
					<div className='bg-secondary rounded-lg shadow p-4'>
						<h2 className='font-semibold mb-4'>Personas que quiza conozcas</h2>
						{recommendedUsers?.map((user) => (
							<RecommendedUser key={user._id} user={user} />
						))}
					</div>
				</div>
			)}
		</div>
	);
};
export default HomePage;

================
File: frontend\src\pages\NetworkPage.jsx
================
import { useState } from 'react';
import { useQuery } from "@tanstack/react-query";
import { axiosInstance } from "../lib/axios";
import Sidebar from "../components/Sidebar";
import { UserPlus, Search  } from "lucide-react";
import FriendRequest from "../components/FriendRequest";
import UserCard from "../components/UserCard";
import RecommendedUser from "../components/RecommendedUser";
  
const NetworkPage = () => {
	const { data: user } = useQuery({ queryKey: ["authUser"] });

	const { data: connectionRequests } = useQuery({
		queryKey: ["connectionRequests"],
		queryFn: () => axiosInstance.get("/connections/requests"),
	});

	const { data: connections } = useQuery({
		queryKey: ["connections"],
		queryFn: () => axiosInstance.get("/connections"),
	});
 
    const { data: recommendedUsers } = useQuery({
        queryKey: ["recommendedUsersBig"],
        queryFn: async () => {
            const res = await axiosInstance.get("/users/suggestions?limit=50");  // Change limit to 3 or any desired number // aca cambiamos el m√°ximo de usaurios recomendados
            return res.data;
        },
    });

	 // State to manage search input
	 const [searchTerm, setSearchTerm] = useState('');

	 // Filter recommended users based on search term with null checks
	 const filteredUsers = recommendedUsers
		 ? recommendedUsers.filter(user =>
			 (user && user.name && user.name.toLowerCase().includes(searchTerm.toLowerCase())) ||
			 (user && user.username && user.username.toLowerCase().includes(searchTerm.toLowerCase()))
		   )
		 : [];
	
	return (
		<div className='grid grid-cols-1 lg:grid-cols-4 gap-6'>
			<div className='col-span-1 lg:col-span-1'>
				<Sidebar user={user} />
			</div>
			<div className='col-span-1 lg:col-span-3'>
				<div className='bg-secondary rounded-lg shadow p-6 mb-6'>
					<h1 className='text-2xl font-bold mb-6'>Mis contactos</h1>

					{connectionRequests?.data?.length > 0 ? (
						<div className='mb-8'>
							<h2 className='text-xl font-semibold mb-2'>Solicitudes de conexi√≥n.</h2>
							<div className='space-y-4'>
								{connectionRequests.data.map((request) => (
									<FriendRequest key={request.id} request={request} />
								))}
							</div>
						</div>
					) : (
						<div className='bg-white rounded-lg shadow p-6 text-center mb-6'>
							<UserPlus size={48} className='mx-auto text-gray-400 mb-4' />
							<h3 className='text-xl font-semibold mb-2'>No hay solicitudes de conexi√≥n</h3>
							<p className='text-gray-600'>
								No tienes solicitudes de conexi√≥n por el momento.
							</p>
							<p className='text-gray-600 mt-2'>
								Explora sugerencias de conexi√≥n abajo para expandir tus contactos!
							</p>
						</div>
					)}
					
					{connections?.data?.length > 0 && (
						<div className='mb-8'>
							<h2 className='text-xl font-semibold mb-4'>Mis conexiones</h2>
							<div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>
								{connections.data.map((connection) => (
									<UserCard key={connection._id} user={connection} isConnection={true} />
								))}
							</div>
						</div>
					)}

					{recommendedUsers?.length > 0 && (
                        <div className='mb-8'>
                            <h2 className='text-xl font-semibold mb-4'>Sugerencias de Conexi√≥n</h2>
                            <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>
                                {recommendedUsers.map((suggestedUser) => (
                                    <RecommendedUser key={suggestedUser._id} user={suggestedUser} />
                                ))}
                            </div>
                        </div>
                    )}
				</div>
			</div>
		</div>
	);
};

export default NetworkPage;

================
File: frontend\src\pages\NotificationsPage.jsx
================
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { axiosInstance } from "../lib/axios";
import { toast } from "react-hot-toast";
import { 
  ExternalLink, 
  Eye, 
  MessageSquare, 
  ThumbsUp, 
  Trash2, 
  UserPlus, 
  Users, 
  Briefcase, 
  Clock 
} from "lucide-react";
import { Link } from "react-router-dom";
import Sidebar from "../components/Sidebar";
import { formatDistanceToNow } from "date-fns";

const NotificationsPage = () => {
  const { data: authUser } = useQuery({ queryKey: ["authUser"] });

  const queryClient = useQueryClient();

  const { data: notifications, isLoading } = useQuery({
    queryKey: ["notifications"],
    queryFn: () => axiosInstance.get("/notifications"),
  });

  const { mutate: markAsReadMutation } = useMutation({
    mutationFn: (id) => axiosInstance.put(`/notifications/${id}/read`),
    onSuccess: () => {
      queryClient.invalidateQueries(["notifications"]);
    },
  });

  const { mutate: deleteNotificationMutation } = useMutation({
    mutationFn: (id) => axiosInstance.delete(`/notifications/${id}`),
    onSuccess: () => {
      queryClient.invalidateQueries(["notifications"]);
      toast.success("Notificaci√≥n eliminada");
    },
  });

  const renderNotificationIcon = (type) => {
    switch (type) {
      case "like":
      case "projectLike":
        return <ThumbsUp className='text-blue-500' />;
      case "comment":
      case "projectComment":
        return <MessageSquare className='text-green-500' />;
      case "connectionAccepted":
        return <UserPlus className='text-purple-500' />;
      case "projectInterest":
        return <Users className='text-yellow-500' />;
      case "projectExpired":
        return <Clock className='text-red-500' />;
      default:
        return null;
    }
  };

  const renderNotificationContent = (notification) => {
    switch (notification.type) {
      case "like":
        return (
          <span>
            <Link to={`/profile/${notification.relatedUser.username}`} className='font-bold'>
              {notification.relatedUser.name}
            </Link>{" "}
            dio me gusta a tu post
          </span>
        );
      case "comment":
        return (
          <span>
            <Link to={`/profile/${notification.relatedUser.username}`} className='font-bold'>
              {notification.relatedUser.name}
            </Link>{" "}
            coment√≥ en tu post
          </span>
        );
      case "connectionAccepted":
        return (
          <span>
            <Link to={`/profile/${notification.relatedUser.username}`} className='font-bold'>
              {notification.relatedUser.name}
            </Link>{" "}
            acept√≥ tu solicitud de conexi√≥n
          </span>
        );
      case "projectInterest":
        return (
          <span>
            <Link to={`/profile/${notification.relatedUser.username}`} className='font-bold'>
              {notification.relatedUser.name}
            </Link>{" "}
            mostr√≥ inter√©s en tu proyecto
          </span>
        );
      case "projectComment":
        return (
          <span>
            <Link to={`/profile/${notification.relatedUser.username}`} className='font-bold'>
              {notification.relatedUser.name}
            </Link>{" "}
            coment√≥ en tu proyecto
          </span>
        );
      case "projectLike":
        return (
          <span>
            <Link to={`/profile/${notification.relatedUser.username}`} className='font-bold'>
              {notification.relatedUser.name}
            </Link>{" "}
            le dio me gusta a tu proyecto
          </span>
        );
      case "projectExpired":
        return (
          <span>
            Tu proyecto ha expirado
          </span>
        );
      default:
        return null;
    }
  };

  const renderRelatedContent = (notification) => {
    // Handle project-related notifications
    if (notification.relatedProject) {
      return (
        <Link
          to={`/projects`} // Link to projects page since there's no single project view
          className='mt-2 p-2 bg-gray-50 rounded-md flex items-center space-x-2 hover:bg-gray-100 transition-colors'
        >
          <Briefcase size={16} className='text-gray-500' />
          <div className='flex-1 overflow-hidden'>
            <p className='text-sm text-gray-600 truncate'>Ver proyecto</p>
          </div>
          <ExternalLink size={14} className='text-gray-400' />
        </Link>
      );
    }
    
    // Handle post-related notifications
    if (!notification.relatedPost) return null;

    return (
      <Link
        to={`/post/${notification.relatedPost._id}`}
        className='mt-2 p-2 bg-gray-50 rounded-md flex items-center space-x-2 hover:bg-gray-100 transition-colors'
      >
        {notification.relatedPost.image && (
          <img src={notification.relatedPost.image} alt='Post preview' className='w-10 h-10 object-cover rounded' />
        )}
        <div className='flex-1 overflow-hidden'>
          <p className='text-sm text-gray-600 truncate'>{notification.relatedPost.content}</p>
        </div>
        <ExternalLink size={14} className='text-gray-400' />
      </Link>
    );
  };

  return (
    <div className='grid grid-cols-1 lg:grid-cols-4 gap-6'>
      <div className='col-span-1 lg:col-span-1'>
        <Sidebar user={authUser} />
      </div>
      <div className='col-span-1 lg:col-span-3'>
        <div className='bg-white rounded-lg shadow p-6'>
          <h1 className='text-2xl font-bold mb-6'>Notificaciones</h1>

          {isLoading ? (
            <p>Cargando notificaciones...</p>
          ) : notifications && notifications.data.length > 0 ? (
            <ul>
              {notifications.data.map((notification) => (
                <li
                  key={notification._id}
                  className={`bg-white border rounded-lg p-4 my-4 transition-all hover:shadow-md ${
                    !notification.read ? "border-blue-500" : "border-gray-200"
                  }`}
                >
                  <div className='flex items-start justify-between'>
                    <div className='flex items-center space-x-4'>
                      {notification.relatedUser && (
                        <Link to={`/profile/${notification.relatedUser.username}`}>
                          <img
                            src={notification.relatedUser.profilePicture || "/avatar.png"}
                            alt={notification.relatedUser.name}
                            className='w-12 h-12 rounded-full object-cover'
                          />
                        </Link>
                      )}

                      <div>
                        <div className='flex items-center gap-2'>
                          <div className='p-1 bg-gray-100 rounded-full'>
                            {renderNotificationIcon(notification.type)}
                          </div>
                          <p className='text-sm'>{renderNotificationContent(notification)}</p>
                        </div>
                        <p className='text-xs text-gray-500 mt-1'>
                          {formatDistanceToNow(new Date(notification.createdAt), {
                            addSuffix: true,
                          })}
                        </p>
                        {renderRelatedContent(notification)}
                      </div>
                    </div>

                    <div className='flex gap-2'>
                      {!notification.read && (
                        <button
                          onClick={() => markAsReadMutation(notification._id)}
                          className='p-1 bg-blue-100 text-blue-600 rounded hover:bg-blue-200 transition-colors'
                          aria-label='Mark as read'
                        >
                          <Eye size={16} />
                        </button>
                      )}

                      <button
                        onClick={() => deleteNotificationMutation(notification._id)}
                        className='p-1 bg-red-100 text-red-600 rounded hover:bg-red-200 transition-colors'
                        aria-label='Delete notification'
                      >
                        <Trash2 size={16} />
                      </button>
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          ) : (
            <p>No hay notificaciones por el momento</p>
          )}
        </div>
      </div>
    </div>
  );
};
export default NotificationsPage;

================
File: frontend\src\pages\PostPage.jsx
================
import { useQuery } from "@tanstack/react-query";
import { useParams } from "react-router-dom";
import { axiosInstance } from "../lib/axios";
import Sidebar from "../components/Sidebar";
import Post from "../components/Post";

const PostPage = () => {
	const { postId } = useParams();
	const { data: authUser } = useQuery({ queryKey: ["authUser"] });

	const { data: post, isLoading } = useQuery({
		queryKey: ["post", postId],
		queryFn: () => axiosInstance.get(`/posts/${postId}`),
	});

	if (isLoading) return <div>Cargando Post...</div>;
	if (!post?.data) return <div>Post not foundno encontrado</div>;

	return (
		<div className='grid grid-cols-1 lg:grid-cols-4 gap-6'>
			<div className='hidden lg:block lg:col-span-1'>
				<Sidebar user={authUser} />
			</div>

			<div className='col-span-1 lg:col-span-3'>
				<Post post={post.data} />
			</div>
		</div>
	);
};
export default PostPage;

================
File: frontend\src\pages\ProfilePage.jsx
================
// frontend/src/pages/ProfilePage.jsx
import { useParams } from "react-router-dom";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { axiosInstance } from "../lib/axios";
import ProfileHeader from "../components/ProfileHeader";
import AboutSection from "../components/AboutSection";
import ExperienceSection from "../components/ExperienceSection";
import EducationSection from "../components/EducationSection";
import SkillsSection from "../components/SkillsSection";
import CompanyInfoSection from "../components/CompanyInfoSection";
import toast from "react-hot-toast";

const ProfilePage = () => {
  const { username } = useParams();
  const queryClient = useQueryClient();

  const { data: authUser, isLoading } = useQuery({
    queryKey: ["authUser"],
  });

  const { data: userProfile, isLoading: isUserProfileLoading } = useQuery({
    queryKey: ["userProfile", username],
    queryFn: () => axiosInstance.get(`/users/${username}`),
  });

  const { mutate: updateProfile } = useMutation({
    mutationFn: async (updatedData) => {
      await axiosInstance.put("/users/profile", updatedData);
    },
    onSuccess: () => {
      toast.success("Perfil actualizado");
      // Invalidate both user profile and auth user to ensure data is fresh
      queryClient.invalidateQueries(["userProfile", username]);
      queryClient.invalidateQueries(["authUser"]);
    },
  });

  if (isLoading || isUserProfileLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  const isOwnProfile = authUser.username === userProfile?.data?.username;
  const userData = isOwnProfile ? authUser : userProfile?.data;

  const handleSave = (updatedData) => {
    console.log('ProfilePage receiving:', updatedData); // Debug log
    updateProfile(updatedData);
  };

  return (
    <div className="max-w-4xl mx-auto p-4">
      <ProfileHeader userData={userData} isOwnProfile={isOwnProfile} onSave={handleSave} />
      
      {/* Company Info Section only for empresarios, show message if first login */}
      {userData.role === 'empresario' && (
        <>
          {userData.isFirstLogin ? (
            <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-6">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <p className="text-sm text-yellow-700">
                    Por favor complete el cuestionario inicial para configurar la informaci‚àö‚â•n de su empresa.
                  </p>
                </div>
              </div>
            </div>
          ) : (
            <CompanyInfoSection userData={userData} isOwnProfile={isOwnProfile} onSave={handleSave} />
          )}
        </>
      )}
      
      <AboutSection userData={userData} isOwnProfile={isOwnProfile} onSave={handleSave} />
      <ExperienceSection userData={userData} isOwnProfile={isOwnProfile} onSave={handleSave} />
      <EducationSection userData={userData} isOwnProfile={isOwnProfile} onSave={handleSave} />
      <SkillsSection userData={userData} isOwnProfile={isOwnProfile} onSave={handleSave} />
    </div>
  );
};

export default ProfilePage;

================
File: frontend\src\pages\ProjectsPage.jsx
================
// frontend/src/pages/ProjectsPage.jsx
import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { axiosInstance } from "../lib/axios";
import Sidebar from "../components/Sidebar";
import ProjectCreation from "../components/ProjectCreation";
import { Briefcase, Plus, Loader, ThumbsUp, MessageSquare, UserPlus, Users, X } from "lucide-react";
import toast from 'react-hot-toast';
import { Link } from "react-router-dom";
import { formatDistanceToNow } from "date-fns";

const ProjectsPage = () => {
    const queryClient = useQueryClient();
    
    const { data: authUser } = useQuery({ 
        queryKey: ["authUser"],
        suspense: false,
    });

    const [showProjectForm, setShowProjectForm] = useState(false);
    const [filters, setFilters] = useState({
        status: "active",
        view: "all"
    });

    const { data: projects = [], isLoading, error } = useQuery({
        queryKey: ["projects", filters],
        queryFn: async () => {
            try {
                const params = new URLSearchParams();
                if (filters.status) params.append('status', filters.status);
                if (filters.view === 'created') params.append('created', 'true');
                if (filters.view === 'interested') params.append('interested', 'true');
                
                const res = await axiosInstance.get(`/projects?${params}`);
                
                // Convert to plain JavaScript objects to avoid mongoose object rendering issues
                return JSON.parse(JSON.stringify(res.data));
            } catch (err) {
                console.error('Error fetching projects:', err);
                throw new Error(err.response?.data?.message || 'Error al cargar los proyectos');
            }
        },
        enabled: !!authUser,
        staleTime: 1000 * 60 * 5, // 5 minutes
    });

    // Like project mutation
    const { mutate: likeProject } = useMutation({
        mutationFn: async (projectId) => {
            const res = await axiosInstance.post(`/projects/${projectId}/like`);
            return res.data;
        },
        onSuccess: () => {
            queryClient.invalidateQueries(["projects", filters]);
            toast.success("Acci√≥n realizada correctamente");
        },
        onError: (error) => {
            toast.error(error.response?.data?.message || "Error al realizar la acci√≥n");
        }
    });

    // Show interest mutation
  // In the toggleInterest mutation, change the success message to use Spanish
const { mutate: toggleInterest } = useMutation({
    mutationFn: async (projectId) => {
        const res = await axiosInstance.post(`/projects/${projectId}/interest`);
        return res.data;
    },
    onSuccess: (data) => {
        queryClient.invalidateQueries(["projects", filters]);
        // Custom Spanish message instead of using the response message
        const message = data.message.includes("removed") ? 
            "Inter√©s removido" : "Inter√©s a√±adido";
        toast.success(message);
    },
    onError: (error) => {
        toast.error(error.response?.data?.message || "Error al mostrar inter√©s");
    }
});
    
    // ProjectPost component with like, comment, and show interest functionality
    const ProjectPost = ({ project, isOwner }) => {
        const [showCommentForm, setShowCommentForm] = useState(false);
        const [commentText, setCommentText] = useState('');
        const [showInterestedUsers, setShowInterestedUsers] = useState(false);
        
        const isLiked = project.likes?.includes(authUser._id);
        const isInterested = project.interestedUsers?.some(u => u.user._id === authUser._id);
        
        const handleLike = () => {
            likeProject(project._id);
        };
        
        const handleToggleInterest = () => {
            toggleInterest(project._id);
        };
        
        const { mutate: addComment } = useMutation({
            mutationFn: async () => {
                const res = await axiosInstance.post(`/projects/${project._id}/comment`, {
                    content: commentText
                });
                return res.data;
            },
            onSuccess: () => {
                queryClient.invalidateQueries(["projects", filters]);
                setCommentText('');
                setShowCommentForm(false);
                toast.success("Comentario a√±adido");
            },
            onError: (error) => {
                toast.error(error.response?.data?.message || "Error al a√±adir comentario");
            }
        });
        
        const handleSubmitComment = (e) => {
            e.preventDefault();
            if (commentText.trim()) {
                addComment();
            }
        };
        
        return (
            <div className="bg-white rounded-lg shadow p-6 border border-gray-200">
                {/* Header */}
                <div className="flex justify-between mb-4">
                    <div className="flex items-center">
                        <Link to={`/profile/${project.author.username}`}>
                            <img 
                                src={project.author.profilePicture || "/avatar.png"} 
                                alt={project.author.name}
                                className="w-10 h-10 rounded-full mr-3"
                            />
                        </Link>
                        <div>
                            <h3 className="font-semibold text-lg">{project.title}</h3>
                            <div className="flex items-center text-sm text-gray-600">
                                <Link to={`/profile/${project.author.username}`} className="hover:underline">
                                    {project.author.name}
                                </Link>
                                <span className="mx-1">‚Ä¢</span>
                                <span>{formatDistanceToNow(new Date(project.createdAt), { addSuffix: true })}</span>
                            </div>
                        </div>
                    </div>
                    <div className="flex flex-col items-end">
                        {isOwner && (
                            <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full mb-2">
                                Tu proyecto
                            </span>
                        )}
                        <span className={`text-xs px-2 py-1 rounded-full ${
                            project.status === 'active' ? 'bg-green-100 text-green-800' :
                            project.status === 'completed' ? 'bg-purple-100 text-purple-800' :
                            'bg-gray-100 text-gray-800'
                        }`}>
                            {project.status === 'active' ? 'Activo' : 
                             project.status === 'completed' ? 'Completado' : 'Expirado'}
                        </span>
                    </div>
                </div>
                
                {/* Content */}
                <p className="mb-4">{project.content}</p>
                {project.image && <img src={project.image} alt="Project image" className="w-full rounded-lg mb-4" />}
                
                {/* Requirements and Goals */}
                {(project.projectRequirements || project.projectGoals) && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        {project.projectRequirements && (
                            <div className="bg-gray-50 p-3 rounded">
                                <h4 className="font-semibold mb-2">Requisitos:</h4>
                                <p className="text-sm">{project.projectRequirements}</p>
                            </div>
                        )}
                        {project.projectGoals && (
                            <div className="bg-gray-50 p-3 rounded">
                                <h4 className="font-semibold mb-2">Metas:</h4>
                                <p className="text-sm">{project.projectGoals}</p>
                            </div>
                        )}
                    </div>
                )}
                
                {/* Actions */}
                <div className="flex items-center justify-between p-2 border-t border-b my-3">
                    <button 
                        onClick={handleLike}
                        className={`flex items-center gap-1 px-3 py-1 rounded-full transition-colors
                            ${isLiked ? 'text-blue-600 bg-blue-50' : 'text-gray-500 hover:bg-gray-100'}`}
                    >
                        <ThumbsUp size={18} className={isLiked ? 'fill-blue-600' : ''} />
                        <span>{project.likes?.length || 0}</span>
                    </button>
                    
                    <button 
                        onClick={() => setShowCommentForm(!showCommentForm)}
                        className="flex items-center gap-1 px-3 py-1 rounded-full text-gray-500 hover:bg-gray-100 transition-colors"
                    >
                        <MessageSquare size={18} />
                        <span>{project.comments?.length || 0} Comentarios</span>
                    </button>
                    
                    <button 
                        onClick={handleToggleInterest}
                        className={`flex items-center gap-1 px-3 py-1 rounded-full transition-colors
                            ${isInterested ? 'text-green-600 bg-green-50' : 'text-gray-500 hover:bg-gray-100'}`}
                        disabled={project.status === 'expired'}
                    >
                        <UserPlus size={18} className={isInterested ? 'fill-green-600' : ''} />
                        <span>{isInterested ? 'Interesado' : 'Mostrar inter√©s'}</span>
                    </button>
                </div>
                
                {/* Interest count and list */}
                {project.interestedUsers?.length > 0 && (
                    <div className="mt-2 mb-4">
                        <button 
                            onClick={() => setShowInterestedUsers(!showInterestedUsers)}
                            className="flex items-center text-sm text-gray-600 hover:text-gray-900"
                        >
                            <Users size={16} className="mr-1" />
                            <span>
                                {project.interestedUsers.length} 
                                {project.interestedUsers.length === 1 ? ' persona interesada' : ' personas interesadas'}
                            </span>
                        </button>
                        
                        {/* Interested Users Modal */}
                        {showInterestedUsers && (
                            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                                <div className="bg-white rounded-lg p-6 w-full max-w-md">
                                    <div className="flex justify-between items-center mb-4">
                                        <h3 className="text-lg font-semibold">Personas interesadas</h3>
                                        <button 
                                            onClick={() => setShowInterestedUsers(false)}
                                            className="text-gray-500 hover:text-gray-700"
                                        >
                                            <X size={20} />
                                        </button>
                                    </div>
                                    
                                    <div className="max-h-80 overflow-y-auto">
                                        {project.interestedUsers.map((interest) => (
                                            <div key={interest.user._id} className="flex items-center p-3 hover:bg-gray-50 rounded">
                                                <Link 
                                                    to={`/profile/${interest.user.username}`}
                                                    className="flex items-center flex-grow"
                                                >
                                                    <img 
                                                        src={interest.user.profilePicture || "/avatar.png"} 
                                                        alt={interest.user.name} 
                                                        className="w-10 h-10 rounded-full mr-3"
                                                    />
                                                    <div>
                                                        <p className="font-medium">{interest.user.name}</p>
                                                        <p className="text-xs text-gray-500">{interest.user.headline}</p>
                                                    </div>
                                                </Link>
                                                <span className="text-xs text-gray-500">
                                                    {formatDistanceToNow(new Date(interest.createdAt), { addSuffix: true })}
                                                </span>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                )}
                
                {/* Comment form */}
                {showCommentForm && (
                    <form onSubmit={handleSubmitComment} className="mt-4">
                        <textarea
                            value={commentText}
                            onChange={(e) => setCommentText(e.target.value)}
                            placeholder="Escribe un comentario..."
                            className="w-full p-3 border rounded-lg mb-2"
                            rows="2"
                            disabled={project.status === 'expired'}
                        />
                        <button 
                            type="submit" 
                            className="bg-primary text-white px-4 py-2 rounded-lg disabled:opacity-50"
                            disabled={!commentText.trim() || project.status === 'expired'}
                        >
                            Comentar
                        </button>
                    </form>
                )}
                
                {/* Comments section */}
                {showCommentForm && project.comments?.length > 0 && (
                    <div className="mt-4 border-t pt-4">
                        <h4 className="font-semibold mb-2">Comentarios</h4>
                        <div className="space-y-3 max-h-60 overflow-y-auto">
                            {project.comments.map((comment) => (
                                <div key={comment._id} className="flex items-start gap-2 p-2 bg-gray-50 rounded">
                                    <Link to={`/profile/${comment.user.username}`}>
                                        <img 
                                            src={comment.user.profilePicture || "/avatar.png"}
                                            alt={comment.user.name}
                                            className="w-8 h-8 rounded-full"
                                        />
                                    </Link>
                                    <div>
                                        <div className="flex items-baseline gap-2">
                                            <Link to={`/profile/${comment.user.username}`} className="font-semibold text-sm hover:underline">
                                                {comment.user.name}
                                            </Link>
                                            <span className="text-xs text-gray-500">
                                                {formatDistanceToNow(new Date(comment.createdAt), { addSuffix: true })}
                                            </span>
                                        </div>
                                        <p className="text-sm">{comment.content}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                )}
            </div>
        );
    };

    if (error) {
        return (
            <div className='grid grid-cols-1 lg:grid-cols-4 gap-6'>
                <div className='hidden lg:block lg:col-span-1'>
                    <Sidebar user={authUser} />
                </div>
                <div className='col-span-1 lg:col-span-3'>
                    <div className='bg-white rounded-lg shadow p-6'>
                        <div className='text-center text-red-600'>
                            <p>Error al cargar los proyectos: {error.message}</p>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className='grid grid-cols-1 lg:grid-cols-4 gap-6'>
            <div className='hidden lg:block lg:col-span-1'>
                <Sidebar user={authUser} />
            </div>

            <div className='col-span-1 lg:col-span-3'>
                <div className='bg-white rounded-lg shadow p-6 mb-6'>
                    <div className='flex justify-between items-center mb-6'>
                        <h1 className='text-2xl font-bold'>Proyectos</h1>
                        <button 
                            onClick={() => setShowProjectForm(!showProjectForm)}
                            className='bg-primary text-white px-4 py-2 rounded-lg flex items-center gap-2'
                        >
                            <Plus size={20} />
                            {showProjectForm ? "Cerrar" : "Crear Proyecto"}
                        </button>
                    </div>

                    {showProjectForm && (
                        <div className='mb-6'>
                            <ProjectCreation 
                                user={authUser} 
                                onComplete={() => {
                                    setShowProjectForm(false);
                                    toast.success('Proyecto creado exitosamente');
                                }}
                            />
                        </div>
                    )}

                    <div className='flex flex-wrap gap-2 mb-6'>
                        <div className='flex items-center border rounded-lg overflow-hidden'>
                            <button 
                                className={`px-4 py-2 ${filters.view === 'all' ? 'bg-primary text-white' : 'bg-gray-100'}`}
                                onClick={() => setFilters({...filters, view: 'all'})}
                            >
                                Todos
                            </button>
                            <button 
                                className={`px-4 py-2 ${filters.view === 'created' ? 'bg-primary text-white' : 'bg-gray-100'}`}
                                onClick={() => setFilters({...filters, view: 'created'})}
                            >
                                Mis Proyectos
                            </button>
                            <button 
                                className={`px-4 py-2 ${filters.view === 'interested' ? 'bg-primary text-white' : 'bg-gray-100'}`}
                                onClick={() => setFilters({...filters, view: 'interested'})}
                            >
                                Interesado
                            </button>
                        </div>

                        <div className='flex items-center border rounded-lg overflow-hidden ml-auto'>
                            <button 
                                className={`px-4 py-2 ${filters.status === 'active' ? 'bg-primary text-white' : 'bg-gray-100'}`}
                                onClick={() => setFilters({...filters, status: 'active'})}
                            >
                                Activos
                            </button>
                            <button 
                                className={`px-4 py-2 ${filters.status === 'completed' ? 'bg-primary text-white' : 'bg-gray-100'}`}
                                onClick={() => setFilters({...filters, status: 'completed'})}
                            >
                                Completados
                            </button>
                            <button 
                                className={`px-4 py-2 ${filters.status === 'expired' ? 'bg-primary text-white' : 'bg-gray-100'}`}
                                onClick={() => setFilters({...filters, status: 'expired'})}
                            >
                                Expirados
                            </button>
                        </div>
                    </div>

                    {isLoading ? (
                        <div className="flex items-center justify-center py-10">
                            <Loader className="w-10 h-10 animate-spin text-primary" />
                        </div>
                    ) : projects && projects.length > 0 ? (
                        <div className='space-y-6'>
                            {projects.map((project) => (
                                <ProjectPost 
                                    key={project._id} 
                                    project={project} 
                                    isOwner={project.author._id === authUser._id}
                                />
                            ))}
                        </div>
                    ) : (
                        <div className='text-center py-10 bg-gray-50 rounded-lg'>
                            <Briefcase size={64} className='mx-auto text-gray-400 mb-4' />
                            <h2 className='text-xl font-semibold mb-2'>No hay proyectos disponibles</h2>
                            <p className='text-gray-600 mb-6'>
                                {filters.view === 'created' 
                                    ? 'No has creado ning√∫n proyecto todav√≠a.' 
                                    : filters.view === 'interested'
                                    ? 'No has mostrado inter√©s en ning√∫n proyecto.'
                                    : 'No hay proyectos que coincidan con tus filtros.'}
                            </p>
                            {filters.view === 'created' && (
                                <button
                                    onClick={() => setShowProjectForm(true)}
                                    className='bg-primary text-white px-4 py-2 rounded-lg'
                                >
                                    Crear tu primer proyecto
                                </button>
                            )}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default ProjectsPage;

================
File: frontend\src\pages\auth\LoginPage.jsx
================
import { Link } from "react-router-dom";
import LoginForm from "../../components/auth/LoginForm";

const LoginPage = () => {
	return (
		<div className='min-h-screen flex flex-col justify-center py-12 sm:px-6 lg:px-8'>
			<div className='sm:mx-auto sm:w-full sm:max-w-md'>
				<img className='mx-auto h-40 w-auto' src='/logo redondo.png' alt='LinkedIn' />
				<h2 className=' text-center text-3xl font-extrabold text-gray-900'>Iniciar sesi√≥n</h2>
			</div>

			<div className='mt-8 sm:mx-auto sm:w-full sm:max-w-md shadow-md'>
				<div className='bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10'>
					<LoginForm />
					<div className='mt-6'>
						<div className='relative'>
							<div className='absolute inset-0 flex items-center'>
								<div className='w-full border-t border-gray-300'></div>
							</div>
							<div className='relative flex justify-center text-sm'>
								<span className='px-2 bg-white text-gray-500'>¬øAun no tienes una cuenta?</span>
							</div>
						</div>
						<div className='mt-6'>
							<Link
								to='/signup'
								className='w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-blue-600 bg-white hover:bg-gray-50'
							>
								Registrate
							</Link>
						</div>
					</div>
				</div>
			</div>
		</div>
	);
};
export default LoginPage;

================
File: frontend\src\pages\auth\SignUpPage.jsx
================
import { Link } from "react-router-dom";
import SignUpForm from "../../components/auth/SignUpForm";

const SignUpPage = () => {
	return (
		<div className='min-h-screen flex flex-col justify-center py-12 sm:px-6 lg:px-8'>
			<div className='sm:mx-auto sm:w-full sm:max-w-md'>
				<img className='mx-auto h-40 w-auto' src='/logo redondo.png' alt='ITTG' />
				<h2 className='text-center text-3xl font-extrabold text-gray-900'>
					Crea conexiones para tu vida profesional
				</h2>
			</div>
			<div className='mt-8 sm:mx-auto sm:w-full sm:max-w-md shadow-md'>
				<div className='bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10'>
					<SignUpForm />

					<div className='mt-6'>
						<div className='relative'>
							<div className='absolute inset-0 flex items-center'>
								<div className='w-full border-t border-gray-300'></div>
							</div>
							<div className='relative flex justify-center text-sm'>
								<span className='px-2 bg-white text-gray-500'>√Ç¬øYa tienes una cuenta?</span>
							</div>
						</div>
						<div className='mt-6'>
							<Link
								to='/login'
								className='w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-blue-600 bg-white hover:bg-gray-50'
							>
								Iniciar sesion
							</Link>
						</div>
					</div>
				</div>
			</div>
		</div>
	);
};
export default SignUpPage;

================
File: frontend\src\utils\dateUtils.js
================
import { format, parseISO, isValid } from "date-fns";

export const formatDate = (dateString) => {
	const date = parseISO(dateString);
	return isValid(date) ? format(date, "MMM yyyy") : "Present";
};
